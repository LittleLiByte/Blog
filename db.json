{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b1d300839caa25a54611812b197cb07932a89a95","modified":1488539172000},{"_id":"source/CNAME","hash":"f556ff7c535de93c3502a07012a597891e955246","modified":1487737808000},{"_id":"themes/yelee/.DS_Store","hash":"38d1af6ac35ca03b6c7f8731ae06e5da9121c8ef","modified":1488537014000},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1488418176000},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1488418176000},{"_id":"themes/yelee/_config.yml","hash":"d991278ea79e9a8b722fe17a7f4dacab42f60b66","modified":1488533994000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1488418176000},{"_id":"source/404/index.md","hash":"b67ec104f1ee8cf51f54747e1795a59e2d64fa2c","modified":1488531202000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488539162000},{"_id":"source/_posts/Tinker调研.md","hash":"e62b56b5b9c31c5b7fae66dab3f49b6d9c4fb344","modified":1488539057000},{"_id":"source/_posts/Github-Hexo搭建博客全记录.md","hash":"6b4df8804b962b2c8b8f9a7d5bc89e85daedb58e","modified":1488539176000},{"_id":"source/_posts/openresty-rsa加解密库.md","hash":"96498324eb3ef2992d5a71ab03b580137124c457","modified":1488537567000},{"_id":"source/about/index.md","hash":"a6a14e9d218057d678a7cea1e8f4f82256b9f0a4","modified":1488530985000},{"_id":"source/tags/index.md","hash":"84474de30574f854633c50014149d7e35c669177","modified":1488530819000},{"_id":"themes/yelee/.git/config","hash":"900873b633dea689f1f85eb22fdcad2ff83c0a23","modified":1488418176000},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488418176000},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488418133000},{"_id":"themes/yelee/.git/index","hash":"92380a3e71d3c8dd8c72e2bf4c2c33db960d20af","modified":1488418176000},{"_id":"themes/yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1488418176000},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1488418176000},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1488418176000},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1488418176000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1488418176000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1488418176000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1488418176000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488418176000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1488418176000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1488418176000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488418176000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488418176000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488418176000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1488418176000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488418176000},{"_id":"themes/yelee/source/favicon.png","hash":"05d3a28fe6b043de1edeea57a2de029b7887d390","modified":1488531927000},{"_id":"themes/yelee/source/.DS_Store","hash":"7e7f1656053254288298ba7f69bcc0457f2fba19","modified":1488537014000},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488418133000},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1488418133000},{"_id":"themes/yelee/.git/logs/HEAD","hash":"65f41a3f0dbc729298e72ef51226d8991403d9b7","modified":1488418176000},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488418133000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1488418176000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1488418176000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1488418176000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1488418176000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1488418176000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1488418176000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1488418176000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1488418176000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1488418176000},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1488418176000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1488418176000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1488418176000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1488418176000},{"_id":"themes/yelee/source/img/.DS_Store","hash":"fb8da6c549b1d97b5b1569b1c85e8f2aa69b03a4","modified":1488529233000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1488418176000},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1488418176000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1488418176000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1488418176000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1488418176000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1488418176000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1488418176000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1488418176000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1488418176000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1488418176000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1488418176000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1488418176000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1488418176000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1488418176000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1488418176000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1488418176000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1488418176000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1488418176000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1488418176000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1488418176000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1488418176000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1488418176000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1488418176000},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1488418176000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1488418176000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1488418176000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1488418176000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1488418176000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1488418176000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1488418176000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1488418176000},{"_id":"themes/yelee/.git/objects/pack/pack-485af1cfc48ddc22cec74abf1d298be87337e722.idx","hash":"da644cab60a1066083c493907579938e6d5dd6ab","modified":1488418176000},{"_id":"themes/yelee/source/img/avatar.png","hash":"0f3bb318df4f5fc959260203545619edb1069e2f","modified":1488435469000},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"65f41a3f0dbc729298e72ef51226d8991403d9b7","modified":1488418176000},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1488418176000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1488418176000},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"65f41a3f0dbc729298e72ef51226d8991403d9b7","modified":1488418176000},{"_id":"themes/yelee/.git/objects/pack/pack-485af1cfc48ddc22cec74abf1d298be87337e722.pack","hash":"0c3d39c9314a7a2975f9d485189a4c7b75ef54b4","modified":1488418176000},{"_id":"public/atom.xml","hash":"9abd29833fb15b316f6f08503227f4998fe5f996","modified":1488539266108},{"_id":"public/post-sitemap.xml","hash":"176aa19938a0ff50df956bb237ef95e3197ea0c4","modified":1488539266312},{"_id":"public/page-sitemap.xml","hash":"012a66e7955dc0e7b6545d3f4e2ccc4eba8df53c","modified":1488539266321},{"_id":"public/category-sitemap.xml","hash":"072300bcd54a8b4086c4f81079845abcffc6ac82","modified":1488539266321},{"_id":"public/tag-sitemap.xml","hash":"3a2beb2aa2980d0480caa3493d1caa3ac51a9ac2","modified":1488539266321},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1488539266321},{"_id":"public/sitemap.xml","hash":"a413360c0d9b45436c0a3668aa2a02e1ee3e9f72","modified":1488539266321},{"_id":"public/search.xml","hash":"dc37a23f7b5a08084f4f0d589a29d7b0747c2a52","modified":1488539266321},{"_id":"public/archives/2017/index.html","hash":"c8cde3daa42ee6870afaff5975c63170f183c812","modified":1488539266335},{"_id":"public/archives/2017/02/index.html","hash":"2a2f986525a070d904f219985ec187eaaff59f96","modified":1488539266335},{"_id":"public/categories/博客搭建/index.html","hash":"2304248a68e41d2add3f2a48dd26f1fcc96e00ae","modified":1488539266335},{"_id":"public/categories/Android/index.html","hash":"50843a62928b5bb5044d15d819927fe056d3d739","modified":1488539266336},{"_id":"public/categories/OpenResty/index.html","hash":"0093025e2f7d54f6af61044bde11bc7c89d61366","modified":1488539266336},{"_id":"public/tags/Hexo/index.html","hash":"6682a79b20c7fe1ca31ad0aac7feb4b29dded24b","modified":1488539266336},{"_id":"public/tags/YeLee/index.html","hash":"bf041e02433b15c80e9e6919de40040f72e0e480","modified":1488539266336},{"_id":"public/tags/Tinker/index.html","hash":"f6789d121caa1160c20f5158ce47d05d2441f03d","modified":1488539266336},{"_id":"public/tags/热修复/index.html","hash":"13ccda2d89c9a71502890b2ec2343f9d1e9ff169","modified":1488539266336},{"_id":"public/tags/RSA/index.html","hash":"2bd369d758835470117109347f4b73d0193b69d0","modified":1488539266336},{"_id":"public/tags/Nginx/index.html","hash":"c56ff1c687a8dc157e03608392ecca683811a64e","modified":1488539266336},{"_id":"public/tags/Lua/index.html","hash":"5a501423e28a91f096f7e9977e59035b69026a3f","modified":1488539266336},{"_id":"public/404/index.html","hash":"0a8c094965e2919ec1a257d2fb709454417b3b21","modified":1488539266336},{"_id":"public/about/index.html","hash":"90770f940f2b98aa67ebb6a0fa238ce3b97eb032","modified":1488539266336},{"_id":"public/tags/index.html","hash":"5137eb69c33b548f5d02724c45018370e9c90cef","modified":1488539266337},{"_id":"public/2017/02/28/Tinker调研/index.html","hash":"8c88805d0354541e8c00ed24e519c8e7bf8e3d77","modified":1488539266337},{"_id":"public/2016/08/20/openresty-rsa加解密库/index.html","hash":"2d3dae3fa10702ce1c40d7aab97c614ac611c392","modified":1488539266337},{"_id":"public/2016/08/10/Github-Hexo搭建博客全记录/index.html","hash":"853e360120264ed2e7518fcb1fed766f8892094e","modified":1488539266338},{"_id":"public/archives/index.html","hash":"a39702e2d6eefb09af19f02ed51f99548e4e4b4e","modified":1488539266338},{"_id":"public/archives/2016/index.html","hash":"d8d04144ab016014321a071753eb2657889f2819","modified":1488539266338},{"_id":"public/archives/2016/08/index.html","hash":"2c946b85324bdec50dba36b8c92fc82fbd2b7d20","modified":1488539266338},{"_id":"public/index.html","hash":"ceb53fe39540b1db56c25abda5fd28e538bd05ec","modified":1488539266339},{"_id":"public/CNAME","hash":"f556ff7c535de93c3502a07012a597891e955246","modified":1488539266346},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1488539266346},{"_id":"public/favicon.png","hash":"05d3a28fe6b043de1edeea57a2de029b7887d390","modified":1488539266346},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1488539266346},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1488539266346},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1488539266346},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1488539266346},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1488539266346},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1488539266347},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1488539266347},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1488539266347},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1488539266347},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1488539266347},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1488539266347},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1488539266347},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1488539266347},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1488539266347},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1488539266347},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1488539266347},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1488539266347},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1488539266347},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1488539266347},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1488539266347},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1488539266347},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1488539266347},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1488539266347},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1488539266347},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1488539266347},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1488539266348},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1488539266348},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1488539267282},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1488539267284},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1488539267286},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1488539267286},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1488539267286},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1488539267287},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1488539267287},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1488539267287},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1488539267287},{"_id":"public/css/style.css","hash":"f116a13a064cb20bc7e2a2c11a2d1e13b7df3e34","modified":1488539267287},{"_id":"public/img/avatar.png","hash":"0f3bb318df4f5fc959260203545619edb1069e2f","modified":1488539267287}],"Category":[{"name":"博客搭建","_id":"ciztpt9lf00033qvcpriunc0b"},{"name":"Android","_id":"ciztpt9ll00063qvc8wowjndf"},{"name":"OpenResty","_id":"ciztpt9lm00093qvctack41oz"}],"Data":[],"Page":[{"title":"404","date":"2017-03-03T08:53:22.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2017-03-03 16:53:22\n---\n","updated":"2017-03-03T08:53:22.000Z","path":"404/index.html","comments":1,"layout":"page","_id":"ciztpt9l600003qvcxx3y1h3i","content":"","excerpt":"","more":""},{"title":"about","date":"2017-03-03T08:49:45.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-03 16:49:45\n---\n","updated":"2017-03-03T08:49:45.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciztpt9mb000o3qvcwqg4kb9n","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-03-03T08:44:15.000Z","_content":"Hexo   **Android**   Tinker\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-03 16:44:15\n---\nHexo   **Android**   Tinker\n","updated":"2017-03-03T08:46:59.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciztpt9mc000p3qvchkxlilux","content":"<p>Hexo   <strong>Android</strong>   Tinker</p>\n","excerpt":"","more":"<p>Hexo   <strong>Android</strong>   Tinker</p>\n"}],"Post":[{"title":"Github+Hexo搭建博客全记录","date":"2016-08-10T08:53:22.000Z","description":"断断续续花了差不多3天时间，终于搭好了这个博客，心情大好，决定记录下本人搭建过程的一点心得，以供同样在摸索的你参考","_content":"\n## 1. Github 配置\n### Github 账号注册\n*要在Github 上面搭建博客当然需要有个账号了，没有的赶紧注册一个，现在的程序员没有一个Github还怎么愉快装逼（误）。\n[传送门](https://github.com/)。怎么注册就不用细说了吧。\n\n### 新建仓库\n新建一个仓库，用来放博客相关的配置和文章。名字可以随意，反正以后也能改。博客仓库一般都会起这个名字：\n**github账号名字.github.io**。\n其他配置也随意，按个人喜好填写，如果实在懒直接下一步。╭(╯^╰)╮\n\n### 仓库配置\n* 进入仓库，仓库标题下方有7个导航，点击最右侧的**Setting**进入仓库属性设置\n* 然后点击GitHub Pages 项下的**Launch automatic page generator**按钮\n* 接着如果在新建仓库的时候又生成README.md文件可以选择**Load README.md**\n* 没有README.md文件则直接点击**Continue to layouts**进入主题选择，随便选一个就好，反正接下来会用更好的Hexo主题\n* 再接着点击**Publish page**搞定\n\n这时候可以在setting页面找到刚刚创建的静态站点的访问地址**Your site is published at xxx**，如果仓库名字是**github账号名字.github.io**，那么访问 **http://github账号名字.github.io** 就可以看到自己创建好的站点了。\n\n## 2.域名绑定\n实际上无需购买域名也可以搭建博客，因此如果不打算购买域名可以跳过此步。不过我觉得使用自己的个性域名会更加酷...\n### 域名购买\n我的域名在[万网](https://wanwang.aliyun.com/)买的，当然你可以选择[dnspod](https://www.dnspod.cn/)。不过个人感觉在万网购买会便宜点。根据个人喜好和经济情况选择域名和购买年限。\n* 在**万网**购买域名后，登录到控制台，进入域名选项页面，给你所购买的域名添加解析，因为博客使用的是Github提供的github pages，因此将**github账号名字.github.io**这个网站的IP地址设置为解析IP，可以使用Ping命令查看github账号名字.github.io的IP地址。\n* 设置完成后，还需要在你新建的博客仓库下设置**Custom domain**，即把你的Github Pages和你购买的域名绑定，这样访问你所购买的域名就会重定向到博客所在的Github Pages。\n如果还有疑问可以参考阿里云的云解析[解析设置入门指南](https://help.aliyun.com/knowledge_detail/29716.html?spm=5176.product29697.3.1.n5T5E9)。\n\n## 3.使用Hexo博客框架\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n* Hexo相比于原生的Github Pages，无论是写作和部署的便捷性上还是主题美观程度上都好太多，所以使用Hexo博客框架是现在的潮流。\n要使用Hexo，首先需要安装好[Git](https://git-scm.com/download/win)和[NodeJs](http://nodejs.cn/),都是exe安装包，如果没有什么特殊需求一路默认设置下一步就可以了。\n* 打开命令行窗口，输入**npm install -g hexo-cli**，耐心等待下载完成，即可安装好Hexo。\n* 在你喜欢的目录下，按住Shift+鼠标右键，选择**在此处打开命令行窗口**，然后输入命令**hexo init xxx**,其中xxx名字可以随便起。耐心等待hexo初始化和依赖组件下载完成，等到命令行窗口输出**INFO  Start blogging with Hexo!**，初始化才是真正完成。\n\n![enter description here][1]\n\n* 一般来说，只需关注**网站配置文件_config.yml**，**博客文章存放目录source/_posts**，**网站主题目录theme**。\n\n### 网站配置文件_config.yml\n具体config.yml配置请参考[Hexo官方说明文档](https://hexo.io/zh-cn/docs/configuration.html).这里我只说我修改的地方。\n*  **title** 博客和网页标签显示的标题，按个人喜好随意\n*  **subtitle** 博客副标题标题，一般写简介或者自己喜欢的话\n*  **author** 作者名字，随便起\n*  **language** 作者名字，随便起\n*  **language**除非你英文特牛逼，否则一般都会改成zh-CN\n*  **url** 设置为你购买的域名，如果没有购买域名可以设置为gtihub博客仓库地址\n* **deploy**  需要进行如下设置：\n　　type: git\n　　repo:博客仓库的git地址，比如我的是https://github.com/LittleLiByte/littlelibyte.github.io.git。\n其他配置属性留到主题设置时再细说。\n\n### 添加博文\n* 使用命令 **hexo new xxx**   可以新建一篇博文,其中xxx是博文标题。新建完成后，可以在/source/_post目录下找到新建的文章，**.md**格式的文件，后缀名不言而喻，博文使用markdown语法来写。\n看到这里不知道markdown的小白也许一惊--写个博客还要去学一种新语法?然而markdown语法真的很简单很简单，掌握基础够用的语法只要五分钟。不信？请看[Markdown 语法的简要规则](http://www.jianshu.com/p/1e402922ee32/)。了解这几个规则就足够写出条理清晰、排版美观的博文了。\n写完博文后，就可以在博客目录下打开命令行窗口，通过**hexo server**启动hexo本地服务，进行文章预览调试，在浏览器输入**http://localhost:4000**就可以预览效果了。\n\n* 在将博文部署之前，如果你的博客购买了域名，那么还需要在博客目录的source文件夹下新建一个**CNAME**文件，只需要添加域名上去即可，例如我的域名是little-byte.com，则**CNAME**文件的内容只要添加little-byte.com即可。\n\n### 将博文部署到Ｇithub\n在博客目录下打开命令行窗口，输入命令**hexo deploy**即可部署.\n```bash\nhexo deploy\n```\n这时候打开你所绑定的域名或者GitHubPages页面，就可以看到你新写的文章了。\n\n## 4.更换主题\nHexo默认的主题是landscape，个人感觉除了背景图比较酷炫之外，其他地方都很一般。所以爱折腾的我就要折腾出自己喜欢的主题。诸多比较之后，选择了YeLee.\n\n### NexT主题下载\n进入到博客目录内，然后通过git将NexT主题文件下载到该文件夹内\n\n``` vim\ngit clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee\n```\n### 使用NexT主题\n修改网站配置文件_config.yml，将**theme: landscape**改成**theme: Yelee**，只需这么一句话就可以启用Yelee主题了。\n可以通过 `hexo clean && hexo s` 命令来在本地启用调试，查看效果。\n一般来说，效果类似下图：\n\n![enter description here][2]\n\n然后就可以开始按照自己的喜好进行配置了。YeLee 详细配置文档见此：[传送门][3]\n**YeLee**说明文档已经说明得非常详细清晰了，这里就不再赘述了。\n如果搭建过程有疑问，欢迎留言讨论。\n\n  [1]: http://om2bpqram.bkt.clouddn.com/1488416894394.jpg\n  [2]: http://om2bpqram.bkt.clouddn.com/1488435176017.jpg\n  [3]: http://moxfive.coding.me/yelee/2.Basic-Usage/","source":"_posts/Github-Hexo搭建博客全记录.md","raw":"---\ntitle: Github+Hexo搭建博客全记录\ncategories: 博客搭建\ntags: \n - Hexo\n - YeLee\ndate: 2016-08-10 16:53:22\ndescription: \"断断续续花了差不多3天时间，终于搭好了这个博客，心情大好，决定记录下本人搭建过程的一点心得，以供同样在摸索的你参考\"\n---\n\n## 1. Github 配置\n### Github 账号注册\n*要在Github 上面搭建博客当然需要有个账号了，没有的赶紧注册一个，现在的程序员没有一个Github还怎么愉快装逼（误）。\n[传送门](https://github.com/)。怎么注册就不用细说了吧。\n\n### 新建仓库\n新建一个仓库，用来放博客相关的配置和文章。名字可以随意，反正以后也能改。博客仓库一般都会起这个名字：\n**github账号名字.github.io**。\n其他配置也随意，按个人喜好填写，如果实在懒直接下一步。╭(╯^╰)╮\n\n### 仓库配置\n* 进入仓库，仓库标题下方有7个导航，点击最右侧的**Setting**进入仓库属性设置\n* 然后点击GitHub Pages 项下的**Launch automatic page generator**按钮\n* 接着如果在新建仓库的时候又生成README.md文件可以选择**Load README.md**\n* 没有README.md文件则直接点击**Continue to layouts**进入主题选择，随便选一个就好，反正接下来会用更好的Hexo主题\n* 再接着点击**Publish page**搞定\n\n这时候可以在setting页面找到刚刚创建的静态站点的访问地址**Your site is published at xxx**，如果仓库名字是**github账号名字.github.io**，那么访问 **http://github账号名字.github.io** 就可以看到自己创建好的站点了。\n\n## 2.域名绑定\n实际上无需购买域名也可以搭建博客，因此如果不打算购买域名可以跳过此步。不过我觉得使用自己的个性域名会更加酷...\n### 域名购买\n我的域名在[万网](https://wanwang.aliyun.com/)买的，当然你可以选择[dnspod](https://www.dnspod.cn/)。不过个人感觉在万网购买会便宜点。根据个人喜好和经济情况选择域名和购买年限。\n* 在**万网**购买域名后，登录到控制台，进入域名选项页面，给你所购买的域名添加解析，因为博客使用的是Github提供的github pages，因此将**github账号名字.github.io**这个网站的IP地址设置为解析IP，可以使用Ping命令查看github账号名字.github.io的IP地址。\n* 设置完成后，还需要在你新建的博客仓库下设置**Custom domain**，即把你的Github Pages和你购买的域名绑定，这样访问你所购买的域名就会重定向到博客所在的Github Pages。\n如果还有疑问可以参考阿里云的云解析[解析设置入门指南](https://help.aliyun.com/knowledge_detail/29716.html?spm=5176.product29697.3.1.n5T5E9)。\n\n## 3.使用Hexo博客框架\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n* Hexo相比于原生的Github Pages，无论是写作和部署的便捷性上还是主题美观程度上都好太多，所以使用Hexo博客框架是现在的潮流。\n要使用Hexo，首先需要安装好[Git](https://git-scm.com/download/win)和[NodeJs](http://nodejs.cn/),都是exe安装包，如果没有什么特殊需求一路默认设置下一步就可以了。\n* 打开命令行窗口，输入**npm install -g hexo-cli**，耐心等待下载完成，即可安装好Hexo。\n* 在你喜欢的目录下，按住Shift+鼠标右键，选择**在此处打开命令行窗口**，然后输入命令**hexo init xxx**,其中xxx名字可以随便起。耐心等待hexo初始化和依赖组件下载完成，等到命令行窗口输出**INFO  Start blogging with Hexo!**，初始化才是真正完成。\n\n![enter description here][1]\n\n* 一般来说，只需关注**网站配置文件_config.yml**，**博客文章存放目录source/_posts**，**网站主题目录theme**。\n\n### 网站配置文件_config.yml\n具体config.yml配置请参考[Hexo官方说明文档](https://hexo.io/zh-cn/docs/configuration.html).这里我只说我修改的地方。\n*  **title** 博客和网页标签显示的标题，按个人喜好随意\n*  **subtitle** 博客副标题标题，一般写简介或者自己喜欢的话\n*  **author** 作者名字，随便起\n*  **language** 作者名字，随便起\n*  **language**除非你英文特牛逼，否则一般都会改成zh-CN\n*  **url** 设置为你购买的域名，如果没有购买域名可以设置为gtihub博客仓库地址\n* **deploy**  需要进行如下设置：\n　　type: git\n　　repo:博客仓库的git地址，比如我的是https://github.com/LittleLiByte/littlelibyte.github.io.git。\n其他配置属性留到主题设置时再细说。\n\n### 添加博文\n* 使用命令 **hexo new xxx**   可以新建一篇博文,其中xxx是博文标题。新建完成后，可以在/source/_post目录下找到新建的文章，**.md**格式的文件，后缀名不言而喻，博文使用markdown语法来写。\n看到这里不知道markdown的小白也许一惊--写个博客还要去学一种新语法?然而markdown语法真的很简单很简单，掌握基础够用的语法只要五分钟。不信？请看[Markdown 语法的简要规则](http://www.jianshu.com/p/1e402922ee32/)。了解这几个规则就足够写出条理清晰、排版美观的博文了。\n写完博文后，就可以在博客目录下打开命令行窗口，通过**hexo server**启动hexo本地服务，进行文章预览调试，在浏览器输入**http://localhost:4000**就可以预览效果了。\n\n* 在将博文部署之前，如果你的博客购买了域名，那么还需要在博客目录的source文件夹下新建一个**CNAME**文件，只需要添加域名上去即可，例如我的域名是little-byte.com，则**CNAME**文件的内容只要添加little-byte.com即可。\n\n### 将博文部署到Ｇithub\n在博客目录下打开命令行窗口，输入命令**hexo deploy**即可部署.\n```bash\nhexo deploy\n```\n这时候打开你所绑定的域名或者GitHubPages页面，就可以看到你新写的文章了。\n\n## 4.更换主题\nHexo默认的主题是landscape，个人感觉除了背景图比较酷炫之外，其他地方都很一般。所以爱折腾的我就要折腾出自己喜欢的主题。诸多比较之后，选择了YeLee.\n\n### NexT主题下载\n进入到博客目录内，然后通过git将NexT主题文件下载到该文件夹内\n\n``` vim\ngit clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee\n```\n### 使用NexT主题\n修改网站配置文件_config.yml，将**theme: landscape**改成**theme: Yelee**，只需这么一句话就可以启用Yelee主题了。\n可以通过 `hexo clean && hexo s` 命令来在本地启用调试，查看效果。\n一般来说，效果类似下图：\n\n![enter description here][2]\n\n然后就可以开始按照自己的喜好进行配置了。YeLee 详细配置文档见此：[传送门][3]\n**YeLee**说明文档已经说明得非常详细清晰了，这里就不再赘述了。\n如果搭建过程有疑问，欢迎留言讨论。\n\n  [1]: http://om2bpqram.bkt.clouddn.com/1488416894394.jpg\n  [2]: http://om2bpqram.bkt.clouddn.com/1488435176017.jpg\n  [3]: http://moxfive.coding.me/yelee/2.Basic-Usage/","slug":"Github-Hexo搭建博客全记录","published":1,"updated":"2017-03-03T11:06:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztpt9l800013qvcy1hry49o","content":"<h2 id=\"1-Github-配置\"><a href=\"#1-Github-配置\" class=\"headerlink\" title=\"1. Github 配置\"></a>1. Github 配置</h2><h3 id=\"Github-账号注册\"><a href=\"#Github-账号注册\" class=\"headerlink\" title=\"Github 账号注册\"></a>Github 账号注册</h3><p>*要在Github 上面搭建博客当然需要有个账号了，没有的赶紧注册一个，现在的程序员没有一个Github还怎么愉快装逼（误）。<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">传送门</a>。怎么注册就不用细说了吧。</p>\n<h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>新建一个仓库，用来放博客相关的配置和文章。名字可以随意，反正以后也能改。博客仓库一般都会起这个名字：<br><strong>github账号名字.github.io</strong>。<br>其他配置也随意，按个人喜好填写，如果实在懒直接下一步。╭(╯^╰)╮</p>\n<h3 id=\"仓库配置\"><a href=\"#仓库配置\" class=\"headerlink\" title=\"仓库配置\"></a>仓库配置</h3><ul>\n<li>进入仓库，仓库标题下方有7个导航，点击最右侧的<strong>Setting</strong>进入仓库属性设置</li>\n<li>然后点击GitHub Pages 项下的<strong>Launch automatic page generator</strong>按钮</li>\n<li>接着如果在新建仓库的时候又生成README.md文件可以选择<strong>Load README.md</strong></li>\n<li>没有README.md文件则直接点击<strong>Continue to layouts</strong>进入主题选择，随便选一个就好，反正接下来会用更好的Hexo主题</li>\n<li>再接着点击<strong>Publish page</strong>搞定</li>\n</ul>\n<p>这时候可以在setting页面找到刚刚创建的静态站点的访问地址<strong>Your site is published at xxx</strong>，如果仓库名字是<strong>github账号名字.github.io</strong>，那么访问 <strong><a href=\"http://github账号名字.github.io\" target=\"_blank\" rel=\"external\">http://github账号名字.github.io</a></strong> 就可以看到自己创建好的站点了。</p>\n<h2 id=\"2-域名绑定\"><a href=\"#2-域名绑定\" class=\"headerlink\" title=\"2.域名绑定\"></a>2.域名绑定</h2><p>实际上无需购买域名也可以搭建博客，因此如果不打算购买域名可以跳过此步。不过我觉得使用自己的个性域名会更加酷…</p>\n<h3 id=\"域名购买\"><a href=\"#域名购买\" class=\"headerlink\" title=\"域名购买\"></a>域名购买</h3><p>我的域名在<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"external\">万网</a>买的，当然你可以选择<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"external\">dnspod</a>。不过个人感觉在万网购买会便宜点。根据个人喜好和经济情况选择域名和购买年限。</p>\n<ul>\n<li>在<strong>万网</strong>购买域名后，登录到控制台，进入域名选项页面，给你所购买的域名添加解析，因为博客使用的是Github提供的github pages，因此将<strong>github账号名字.github.io</strong>这个网站的IP地址设置为解析IP，可以使用Ping命令查看github账号名字.github.io的IP地址。</li>\n<li>设置完成后，还需要在你新建的博客仓库下设置<strong>Custom domain</strong>，即把你的Github Pages和你购买的域名绑定，这样访问你所购买的域名就会重定向到博客所在的Github Pages。<br>如果还有疑问可以参考阿里云的云解析<a href=\"https://help.aliyun.com/knowledge_detail/29716.html?spm=5176.product29697.3.1.n5T5E9\" target=\"_blank\" rel=\"external\">解析设置入门指南</a>。</li>\n</ul>\n<h2 id=\"3-使用Hexo博客框架\"><a href=\"#3-使用Hexo博客框架\" class=\"headerlink\" title=\"3.使用Hexo博客框架\"></a>3.使用Hexo博客框架</h2><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<ul>\n<li>Hexo相比于原生的Github Pages，无论是写作和部署的便捷性上还是主题美观程度上都好太多，所以使用Hexo博客框架是现在的潮流。<br>要使用Hexo，首先需要安装好<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">Git</a>和<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">NodeJs</a>,都是exe安装包，如果没有什么特殊需求一路默认设置下一步就可以了。</li>\n<li>打开命令行窗口，输入<strong>npm install -g hexo-cli</strong>，耐心等待下载完成，即可安装好Hexo。</li>\n<li>在你喜欢的目录下，按住Shift+鼠标右键，选择<strong>在此处打开命令行窗口</strong>，然后输入命令<strong>hexo init xxx</strong>,其中xxx名字可以随便起。耐心等待hexo初始化和依赖组件下载完成，等到命令行窗口输出<strong>INFO  Start blogging with Hexo!</strong>，初始化才是真正完成。</li>\n</ul>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488416894394.jpg\" alt=\"enter description here\"></p>\n<ul>\n<li>一般来说，只需关注<strong>网站配置文件_config.yml</strong>，<strong>博客文章存放目录source/_posts</strong>，<strong>网站主题目录theme</strong>。</li>\n</ul>\n<h3 id=\"网站配置文件-config-yml\"><a href=\"#网站配置文件-config-yml\" class=\"headerlink\" title=\"网站配置文件_config.yml\"></a>网站配置文件_config.yml</h3><p>具体config.yml配置请参考<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">Hexo官方说明文档</a>.这里我只说我修改的地方。</p>\n<ul>\n<li><strong>title</strong> 博客和网页标签显示的标题，按个人喜好随意</li>\n<li><strong>subtitle</strong> 博客副标题标题，一般写简介或者自己喜欢的话</li>\n<li><strong>author</strong> 作者名字，随便起</li>\n<li><strong>language</strong> 作者名字，随便起</li>\n<li><strong>language</strong>除非你英文特牛逼，否则一般都会改成zh-CN</li>\n<li><strong>url</strong> 设置为你购买的域名，如果没有购买域名可以设置为gtihub博客仓库地址</li>\n<li><strong>deploy</strong>  需要进行如下设置：<br>　　type: git<br>　　repo:博客仓库的git地址，比如我的是<a href=\"https://github.com/LittleLiByte/littlelibyte.github.io.git。\" target=\"_blank\" rel=\"external\">https://github.com/LittleLiByte/littlelibyte.github.io.git。</a><br>其他配置属性留到主题设置时再细说。</li>\n</ul>\n<h3 id=\"添加博文\"><a href=\"#添加博文\" class=\"headerlink\" title=\"添加博文\"></a>添加博文</h3><ul>\n<li><p>使用命令 <strong>hexo new xxx</strong>   可以新建一篇博文,其中xxx是博文标题。新建完成后，可以在/source/_post目录下找到新建的文章，<strong>.md</strong>格式的文件，后缀名不言而喻，博文使用markdown语法来写。<br>看到这里不知道markdown的小白也许一惊–写个博客还要去学一种新语法?然而markdown语法真的很简单很简单，掌握基础够用的语法只要五分钟。不信？请看<a href=\"http://www.jianshu.com/p/1e402922ee32/\" target=\"_blank\" rel=\"external\">Markdown 语法的简要规则</a>。了解这几个规则就足够写出条理清晰、排版美观的博文了。<br>写完博文后，就可以在博客目录下打开命令行窗口，通过<strong>hexo server</strong>启动hexo本地服务，进行文章预览调试，在浏览器输入<strong><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></strong>就可以预览效果了。</p>\n</li>\n<li><p>在将博文部署之前，如果你的博客购买了域名，那么还需要在博客目录的source文件夹下新建一个<strong>CNAME</strong>文件，只需要添加域名上去即可，例如我的域名是little-byte.com，则<strong>CNAME</strong>文件的内容只要添加little-byte.com即可。</p>\n</li>\n</ul>\n<h3 id=\"将博文部署到Github\"><a href=\"#将博文部署到Github\" class=\"headerlink\" title=\"将博文部署到Ｇithub\"></a>将博文部署到Ｇithub</h3><p>在博客目录下打开命令行窗口，输入命令<strong>hexo deploy</strong>即可部署.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>这时候打开你所绑定的域名或者GitHubPages页面，就可以看到你新写的文章了。</p>\n<h2 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4.更换主题\"></a>4.更换主题</h2><p>Hexo默认的主题是landscape，个人感觉除了背景图比较酷炫之外，其他地方都很一般。所以爱折腾的我就要折腾出自己喜欢的主题。诸多比较之后，选择了YeLee.</p>\n<h3 id=\"NexT主题下载\"><a href=\"#NexT主题下载\" class=\"headerlink\" title=\"NexT主题下载\"></a>NexT主题下载</h3><p>进入到博客目录内，然后通过git将NexT主题文件下载到该文件夹内</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/MOxFIVE/hexo-theme-yelee.git themes/yelee</div></pre></td></tr></table></figure>\n<h3 id=\"使用NexT主题\"><a href=\"#使用NexT主题\" class=\"headerlink\" title=\"使用NexT主题\"></a>使用NexT主题</h3><p>修改网站配置文件_config.yml，将<strong>theme: landscape</strong>改成<strong>theme: Yelee</strong>，只需这么一句话就可以启用Yelee主题了。<br>可以通过 <code>hexo clean &amp;&amp; hexo s</code> 命令来在本地启用调试，查看效果。<br>一般来说，效果类似下图：</p>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488435176017.jpg\" alt=\"enter description here\"></p>\n<p>然后就可以开始按照自己的喜好进行配置了。YeLee 详细配置文档见此：<a href=\"http://moxfive.coding.me/yelee/2.Basic-Usage/\" target=\"_blank\" rel=\"external\">传送门</a><br><strong>YeLee</strong>说明文档已经说明得非常详细清晰了，这里就不再赘述了。<br>如果搭建过程有疑问，欢迎留言讨论。</p>\n","excerpt":"","more":"<h2 id=\"1-Github-配置\"><a href=\"#1-Github-配置\" class=\"headerlink\" title=\"1. Github 配置\"></a>1. Github 配置</h2><h3 id=\"Github-账号注册\"><a href=\"#Github-账号注册\" class=\"headerlink\" title=\"Github 账号注册\"></a>Github 账号注册</h3><p>*要在Github 上面搭建博客当然需要有个账号了，没有的赶紧注册一个，现在的程序员没有一个Github还怎么愉快装逼（误）。<br><a href=\"https://github.com/\">传送门</a>。怎么注册就不用细说了吧。</p>\n<h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>新建一个仓库，用来放博客相关的配置和文章。名字可以随意，反正以后也能改。博客仓库一般都会起这个名字：<br><strong>github账号名字.github.io</strong>。<br>其他配置也随意，按个人喜好填写，如果实在懒直接下一步。╭(╯^╰)╮</p>\n<h3 id=\"仓库配置\"><a href=\"#仓库配置\" class=\"headerlink\" title=\"仓库配置\"></a>仓库配置</h3><ul>\n<li>进入仓库，仓库标题下方有7个导航，点击最右侧的<strong>Setting</strong>进入仓库属性设置</li>\n<li>然后点击GitHub Pages 项下的<strong>Launch automatic page generator</strong>按钮</li>\n<li>接着如果在新建仓库的时候又生成README.md文件可以选择<strong>Load README.md</strong></li>\n<li>没有README.md文件则直接点击<strong>Continue to layouts</strong>进入主题选择，随便选一个就好，反正接下来会用更好的Hexo主题</li>\n<li>再接着点击<strong>Publish page</strong>搞定</li>\n</ul>\n<p>这时候可以在setting页面找到刚刚创建的静态站点的访问地址<strong>Your site is published at xxx</strong>，如果仓库名字是<strong>github账号名字.github.io</strong>，那么访问 <strong><a href=\"http://github账号名字.github.io\">http://github账号名字.github.io</a></strong> 就可以看到自己创建好的站点了。</p>\n<h2 id=\"2-域名绑定\"><a href=\"#2-域名绑定\" class=\"headerlink\" title=\"2.域名绑定\"></a>2.域名绑定</h2><p>实际上无需购买域名也可以搭建博客，因此如果不打算购买域名可以跳过此步。不过我觉得使用自己的个性域名会更加酷…</p>\n<h3 id=\"域名购买\"><a href=\"#域名购买\" class=\"headerlink\" title=\"域名购买\"></a>域名购买</h3><p>我的域名在<a href=\"https://wanwang.aliyun.com/\">万网</a>买的，当然你可以选择<a href=\"https://www.dnspod.cn/\">dnspod</a>。不过个人感觉在万网购买会便宜点。根据个人喜好和经济情况选择域名和购买年限。</p>\n<ul>\n<li>在<strong>万网</strong>购买域名后，登录到控制台，进入域名选项页面，给你所购买的域名添加解析，因为博客使用的是Github提供的github pages，因此将<strong>github账号名字.github.io</strong>这个网站的IP地址设置为解析IP，可以使用Ping命令查看github账号名字.github.io的IP地址。</li>\n<li>设置完成后，还需要在你新建的博客仓库下设置<strong>Custom domain</strong>，即把你的Github Pages和你购买的域名绑定，这样访问你所购买的域名就会重定向到博客所在的Github Pages。<br>如果还有疑问可以参考阿里云的云解析<a href=\"https://help.aliyun.com/knowledge_detail/29716.html?spm=5176.product29697.3.1.n5T5E9\">解析设置入门指南</a>。</li>\n</ul>\n<h2 id=\"3-使用Hexo博客框架\"><a href=\"#3-使用Hexo博客框架\" class=\"headerlink\" title=\"3.使用Hexo博客框架\"></a>3.使用Hexo博客框架</h2><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<ul>\n<li>Hexo相比于原生的Github Pages，无论是写作和部署的便捷性上还是主题美观程度上都好太多，所以使用Hexo博客框架是现在的潮流。<br>要使用Hexo，首先需要安装好<a href=\"https://git-scm.com/download/win\">Git</a>和<a href=\"http://nodejs.cn/\">NodeJs</a>,都是exe安装包，如果没有什么特殊需求一路默认设置下一步就可以了。</li>\n<li>打开命令行窗口，输入<strong>npm install -g hexo-cli</strong>，耐心等待下载完成，即可安装好Hexo。</li>\n<li>在你喜欢的目录下，按住Shift+鼠标右键，选择<strong>在此处打开命令行窗口</strong>，然后输入命令<strong>hexo init xxx</strong>,其中xxx名字可以随便起。耐心等待hexo初始化和依赖组件下载完成，等到命令行窗口输出<strong>INFO  Start blogging with Hexo!</strong>，初始化才是真正完成。</li>\n</ul>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488416894394.jpg\" alt=\"enter description here\"></p>\n<ul>\n<li>一般来说，只需关注<strong>网站配置文件_config.yml</strong>，<strong>博客文章存放目录source/_posts</strong>，<strong>网站主题目录theme</strong>。</li>\n</ul>\n<h3 id=\"网站配置文件-config-yml\"><a href=\"#网站配置文件-config-yml\" class=\"headerlink\" title=\"网站配置文件_config.yml\"></a>网站配置文件_config.yml</h3><p>具体config.yml配置请参考<a href=\"https://hexo.io/zh-cn/docs/configuration.html\">Hexo官方说明文档</a>.这里我只说我修改的地方。</p>\n<ul>\n<li><strong>title</strong> 博客和网页标签显示的标题，按个人喜好随意</li>\n<li><strong>subtitle</strong> 博客副标题标题，一般写简介或者自己喜欢的话</li>\n<li><strong>author</strong> 作者名字，随便起</li>\n<li><strong>language</strong> 作者名字，随便起</li>\n<li><strong>language</strong>除非你英文特牛逼，否则一般都会改成zh-CN</li>\n<li><strong>url</strong> 设置为你购买的域名，如果没有购买域名可以设置为gtihub博客仓库地址</li>\n<li><strong>deploy</strong>  需要进行如下设置：<br>　　type: git<br>　　repo:博客仓库的git地址，比如我的是<a href=\"https://github.com/LittleLiByte/littlelibyte.github.io.git。\">https://github.com/LittleLiByte/littlelibyte.github.io.git。</a><br>其他配置属性留到主题设置时再细说。</li>\n</ul>\n<h3 id=\"添加博文\"><a href=\"#添加博文\" class=\"headerlink\" title=\"添加博文\"></a>添加博文</h3><ul>\n<li><p>使用命令 <strong>hexo new xxx</strong>   可以新建一篇博文,其中xxx是博文标题。新建完成后，可以在/source/_post目录下找到新建的文章，<strong>.md</strong>格式的文件，后缀名不言而喻，博文使用markdown语法来写。<br>看到这里不知道markdown的小白也许一惊–写个博客还要去学一种新语法?然而markdown语法真的很简单很简单，掌握基础够用的语法只要五分钟。不信？请看<a href=\"http://www.jianshu.com/p/1e402922ee32/\">Markdown 语法的简要规则</a>。了解这几个规则就足够写出条理清晰、排版美观的博文了。<br>写完博文后，就可以在博客目录下打开命令行窗口，通过<strong>hexo server</strong>启动hexo本地服务，进行文章预览调试，在浏览器输入<strong><a href=\"http://localhost:4000\">http://localhost:4000</a></strong>就可以预览效果了。</p>\n</li>\n<li><p>在将博文部署之前，如果你的博客购买了域名，那么还需要在博客目录的source文件夹下新建一个<strong>CNAME</strong>文件，只需要添加域名上去即可，例如我的域名是little-byte.com，则<strong>CNAME</strong>文件的内容只要添加little-byte.com即可。</p>\n</li>\n</ul>\n<h3 id=\"将博文部署到Github\"><a href=\"#将博文部署到Github\" class=\"headerlink\" title=\"将博文部署到Ｇithub\"></a>将博文部署到Ｇithub</h3><p>在博客目录下打开命令行窗口，输入命令<strong>hexo deploy</strong>即可部署.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>这时候打开你所绑定的域名或者GitHubPages页面，就可以看到你新写的文章了。</p>\n<h2 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4.更换主题\"></a>4.更换主题</h2><p>Hexo默认的主题是landscape，个人感觉除了背景图比较酷炫之外，其他地方都很一般。所以爱折腾的我就要折腾出自己喜欢的主题。诸多比较之后，选择了YeLee.</p>\n<h3 id=\"NexT主题下载\"><a href=\"#NexT主题下载\" class=\"headerlink\" title=\"NexT主题下载\"></a>NexT主题下载</h3><p>进入到博客目录内，然后通过git将NexT主题文件下载到该文件夹内</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/MOxFIVE/hexo-theme-yelee.git themes/yelee</div></pre></td></tr></table></figure>\n<h3 id=\"使用NexT主题\"><a href=\"#使用NexT主题\" class=\"headerlink\" title=\"使用NexT主题\"></a>使用NexT主题</h3><p>修改网站配置文件_config.yml，将<strong>theme: landscape</strong>改成<strong>theme: Yelee</strong>，只需这么一句话就可以启用Yelee主题了。<br>可以通过 <code>hexo clean &amp;&amp; hexo s</code> 命令来在本地启用调试，查看效果。<br>一般来说，效果类似下图：</p>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488435176017.jpg\" alt=\"enter description here\"></p>\n<p>然后就可以开始按照自己的喜好进行配置了。YeLee 详细配置文档见此：<a href=\"http://moxfive.coding.me/yelee/2.Basic-Usage/\">传送门</a><br><strong>YeLee</strong>说明文档已经说明得非常详细清晰了，这里就不再赘述了。<br>如果搭建过程有疑问，欢迎留言讨论。</p>\n"},{"title":"Tinker调研","date":"2017-02-28T10:55:58.000Z","description":"最近调研了一下Tinker，并与其他修复框架做了一下对比，并尝试接入Tinker到工程中查看热修复效果","_content":"\n## Tinker与其他热修复框架对比\n\n![][1]\n\n**总结**：\n\n 1. **阿里的AndFix**作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；\n 2. **美团的Robust**兼容性与成功率最高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案，并且尚未开源，不过有参照Robust的install run原理实现的[开源方案][2]，不过较少人关注，实际效果未知。\n 3. **百度金融的RocooFix**是Nuwa方案的改良版，增加了lib替换和即时生效支持，但是不支持在windows平台生成补丁，兼容性还有待测试。\n 4. **饿了么的Amigo**是非常强大的一个方案，不仅是类替换，lib替换，资源替换都支持，同时也支持新增四大组件，缺点是不支持Android 3.0 ，notification & widget中RemoteViews的自定义布局不支持修改,只支持内容修复。\n\nAmigo官方wiki介绍\n\n> Amigo 原理与 QQZone\n> 的方案有些类似，QQZone,Tinker,Nuwa这类方案是通过修改PathClassLoader中的dex实现的，Amigo则是釜底抽薪直接替换ClassLoader。同时进一步实现了\n> so 文件、资源文件、四大组件的修复，可以对APP全面进行修复\n\n 5. **微信的Tinker**是各方面都比较优秀的方案，毕竟经过了几亿微信用户的验证。Tinker的优点上图已经很明确了，而存在的缺陷有以下几方面：\n - Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；  \n - 由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；\n -  在Android N上，补丁对应用启动时间有轻微的影响；\n -  不支持部分三星android-21机型，加载补丁时会主动抛出\"TinkerRuntimeException:checkDexInstall failed\"；\n -  由于各个厂商的加固实现并不一致，在1.7.6以及之后的版本，tinker不再支持加固的动态更新；（由于360电子市场必须经过加固应用才能上架，因此可以说tinker无法在360渠道上的apk实现热更新）\n -  对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。\n -   与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。\n -    需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。\n -    合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。\n -    接入tinker sdk略微复杂\n\n## Tinker接入\n\n### 1. 添加gradle依赖\n\n 1. 首先在项目的**gradle.properties**文件指定Tinker版本，这样只需修改此处版本号就能更改Tinker版本。加入以下属性：\n\n``` ini\nTINKER_VERSION=1.7.7\n```\n\n 2. 在项目的**build.gradle**中，添加*tinker-patch-gradle-plugin*的依赖\n\n``` nginx\n  classpath \"com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}\"\n```\n\n 3. 然后在app的gradle文件**app/build.gradle**，我们需要添加tinker的库依赖以及apply tinker的gradle插件.\n\n``` nix\n    compile(\"com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}\") { changing = true }\n    provided(\"com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}\") { changing = true }\n```\n其中，**tinker-android-anno**用于注解生成application类 \n**tinker-android-lib**为tinker的核心库\n 4. 在app的gradle文件**app/build.gradle**配置**tinkerPatch task**，下面给出简单的示例：\n //全局信息相关的配置项\n\n``` groovy\ntinkerPatch {\n    //有问题的apk的地址  准apk包的路径，必须输入，否则会报错\n    oldApk = \"/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk\"\n    //\n    ignoreWarning = false\n    //在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名\n    useSign = true\n    //编译相关的配置项\n    buildConfig {\n        //在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。\n        // 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。\n        tinkerId = \"1.0\"\n    }\n    //用于生成补丁包中的'package_meta.txt'文件\n    packageConfig {\n        //onfigField(\"key\", \"value\"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。\n        // 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。\n        // 但是建议直接通过修改代码来实现，例如BuildConfig。\n//        configField(\"TINKER_ID\", \"1.0\")\n    }\n    //dex相关的配置项\n    dex {\n        //只能是'raw'或者'jar'。\n        //对于'raw'模式，我们将会保持输入dex的格式。\n        //对于'jar'模式，我们将会把输入dex重新压缩封装到jar。\n        // 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()\n        dexMode = \"jar\"\n        //需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...\n        pattern = [\"classes*.dex\", \"assets/secondary-dex-?.jar\"]\n        //它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。\n        loader = [\"com.tencent.tinker.loader.*\", \"com.cn21.tinkertest.MyApplication\"]\n        /**\n         * 这里需要定义的类有：\n         1. 你自己定义的Application类；\n         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；\n         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；\n         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，\n         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。\n         */\n    }\n    //lib相关的配置项\n    lib {\n        //需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...\n        pattern = [\"lib/armeabi/*.so\", \"lib/arm64-v8a/*.so\", \"lib/armeabi-v7a/*.so\", \"lib/mips/*.so\", \"lib/mips64/*.so\", \"lib/x86/*.so\", \"lib/x86_64/*.so\"]\n    }\n    //res相关的配置项\n    res {\n        pattern = [\"res/*\", \"assets/*\", \"resources.arsc\", \"AndroidManifest.xml\"]\n        //对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。\n        // 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb\n        largeModSize = 100\n    }\n    //7zip路径配置项，执行前提是useSign为true\n    sevenZip {\n        //例如\"com.tencent.mm:SevenZip:1.1.10\"，将自动根据机器属性获得对应的7za运行文件，推荐使用。\n        zipArtifact = \"com.tencent.mm:SevenZip:1.1.10\"\n    }\n}\n```\n上面只是使用了部分tinker参数，全部参数及含义可参考[tinkerPatch gradle参数官方wiki][3]\n\n### 2. 修改Application类\n 1. 修改工程的Application类，使其继承自**DefaultApplicationLike**，然后生成默认的构造方法，并覆盖**onBaseContextAttached**方法，然后添加一个**registerActivityLifecycleCallbacks**方法，同时在自己的Application类上加上以下注解：\n\n``` nix\n @DefaultLifeCycle(application = \"com.cn21.tinkertest.MyApplication\",\n        flags = ShareConstants.TINKER_ENABLE_ALL,\n        loadVerifyFlag = false)\n```\n其中，\n\n - **application**属性指定的是tinker为我们生成的真正的Application，一般是**包名＋自定义的Application名称**作为名字，其中application属性指定的是tinker为我们生成的真正的Application类，需要注意两点，一是AndroidManifest.xml 中的application节点下的name 属性必须是这个application属性的值。As找不到这个Application报错但不会影响编译成功；二是在**app/build.gradle**文件中的tinkerPatch-dex-loader节点中添加application属性的值（见tinkerPatch gradle配置）。\n - **flags**属性指定tinker可以修复的范围，*TINKER_ENABLE_ALL*是全部都可以修复，还有*TINKER_DEX_AND_LIBRARY*，*TINKER_RESOURCE_MASK*，*TINKER_DEX_MASK*等等，根据名字就可以知道所代表的含义。\n\n\n以下是完整的自定义Application代码：\n\n``` java\n@DefaultLifeCycle(application = \"com.cn21.tinkertest.MyApplication\",\n        flags = ShareConstants.TINKER_ENABLE_ALL,\n        loadVerifyFlag = false)\npublic class TinkerTestApplicarion extends DefaultApplicationLike {\n\n    public TinkerTestApplicarion(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) {\n        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);\n    }\n\n    /**\n     *  install tinker\n     * @param base\n     */\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n    @Override\n    public void onBaseContextAttached(Context base) {\n        super.onBaseContextAttached(base);\n        TinkerInstaller.install(this);\n    }\n\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n    public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) {\n        getApplication().registerActivityLifecycleCallbacks(callback);\n    }\n}\n```\n### 3. 使用tinker生成补丁\n到此，配置已经基本完成了。下面开始使用。\n 1. 首先编译运行一次工程，将生成的apk保存备份在除了build/output/apk以外的文件夹，tinker会读取这个旧的apk与新的apk进行比较生成补丁，同时需要修改**app/build.gradle**文件中oldApk的路径。\n 2. 修改工程中代码或者资源，然后打开As gradle任务栏，找到**tinker任务**那一项，选择对应的tinker任务运行\n\n![enter description here][4]\n\n然后在build/outputs/tinkerPatch目录下会生成补丁包与相关日志。将补丁包**patch_signed_7zip.apk**push到手机的sdcard目录，此时就可以在工程需要的地方调用tinker 的补丁加载方法了\n\n``` java\nTinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + \"/patch_signed_7zip.apk\");\n```\n因为需要读取sdcard中的文件，因此读写权限必须要配置。\n如果补丁加载成功，可以在logcat中看到以下信息\n\n![enter description here][5]\n需要注意的是，tinker默认补丁成功后会杀死应用，因此如果有需要则自定义ResultService继承自**DefaultTinkerResultService**，修改补丁成功后的行为\n 3. 重启应用则可以看到打补丁后的效果。\n\n更详尽的tinker知识请参考tinker [Github主页][6]，包括tinker源码与使用示例都可以看到\n\n## Tinker接入其他问题\n### 1. 开启multidex支持\n如果项目需要用到multidex则需要在gradle中添加multidex依赖，\n\n``` gradle\n compile \"com.android.support:multidex:1.0.1\"\n```\n在android-defaultConfig节点中添加\n\n``` nginx\n multiDexEnabled true\n```\n在Application初始化tinker之前加入\n\n``` cmake\n MultiDex.install(base);\n```\n### 2. 多渠道打包\ntinker默认是每个渠道生成一个对应的补丁包，这样子会造成空间浪费和发布的时候容易出错。因此官方推荐使用[packer-ng-plugin][7]工具进行多渠道打包。\n\n### 3. 资源混淆\n如果应用使用了[AndResGuard][8]混淆资源文件，编译流程需要做特殊处理，具体请参考[这篇文章][9]\n\n### 4. 应用加固\ntinker1.7.6之后不再支持加固\n\n### 5.tinker与instant run的兼容问题\n事实上，若编译时都使用assemble*, tinker与instant run是可以兼容的。但是不少用户基础包与补丁包混用两种模式导致补丁过大，所以tinker编译时禁用instant run，我们可以在设置中禁用instant run或使用assemble方式编译。\n\n大家日常debug时若想开启instant run功能，可以将tinker暂时关闭：\n\n``` objectivec\next {\n    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?\n    tinkerEnabled = false\n}\n```\n更多常见问题请参见[官方wiki][10]\n\n\n  [1]: http://om2bpqram.bkt.clouddn.com/1488428148337.jpg\n  [2]: https://github.com/fourbrother/Robust\n  [3]: https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\n  [4]: http://om2bpqram.bkt.clouddn.com/1488428191026.jpg\n  [5]: http://om2bpqram.bkt.clouddn.com/1488428245626.jpg\n  [6]: https://github.com/Tencent/tinker\n  [7]: https://github.com/mcxiaoke/packer-ng-plugin\n  [8]: https://github.com/shwenzhang/AndResGuard\n  [9]: http://www.cnblogs.com/yyangblog/p/6268818.html\n  [10]: https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98","source":"_posts/Tinker调研.md","raw":"---\ntitle: Tinker调研\ndate: 2017-02-28 18:55:58\ncategories: Android\ntags:\n - Tinker\n - 热修复 \ndescription:\n \"最近调研了一下Tinker，并与其他修复框架做了一下对比，并尝试接入Tinker到工程中查看热修复效果\"\n---\n\n## Tinker与其他热修复框架对比\n\n![][1]\n\n**总结**：\n\n 1. **阿里的AndFix**作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；\n 2. **美团的Robust**兼容性与成功率最高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案，并且尚未开源，不过有参照Robust的install run原理实现的[开源方案][2]，不过较少人关注，实际效果未知。\n 3. **百度金融的RocooFix**是Nuwa方案的改良版，增加了lib替换和即时生效支持，但是不支持在windows平台生成补丁，兼容性还有待测试。\n 4. **饿了么的Amigo**是非常强大的一个方案，不仅是类替换，lib替换，资源替换都支持，同时也支持新增四大组件，缺点是不支持Android 3.0 ，notification & widget中RemoteViews的自定义布局不支持修改,只支持内容修复。\n\nAmigo官方wiki介绍\n\n> Amigo 原理与 QQZone\n> 的方案有些类似，QQZone,Tinker,Nuwa这类方案是通过修改PathClassLoader中的dex实现的，Amigo则是釜底抽薪直接替换ClassLoader。同时进一步实现了\n> so 文件、资源文件、四大组件的修复，可以对APP全面进行修复\n\n 5. **微信的Tinker**是各方面都比较优秀的方案，毕竟经过了几亿微信用户的验证。Tinker的优点上图已经很明确了，而存在的缺陷有以下几方面：\n - Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；  \n - 由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；\n -  在Android N上，补丁对应用启动时间有轻微的影响；\n -  不支持部分三星android-21机型，加载补丁时会主动抛出\"TinkerRuntimeException:checkDexInstall failed\"；\n -  由于各个厂商的加固实现并不一致，在1.7.6以及之后的版本，tinker不再支持加固的动态更新；（由于360电子市场必须经过加固应用才能上架，因此可以说tinker无法在360渠道上的apk实现热更新）\n -  对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。\n -   与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。\n -    需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。\n -    合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。\n -    接入tinker sdk略微复杂\n\n## Tinker接入\n\n### 1. 添加gradle依赖\n\n 1. 首先在项目的**gradle.properties**文件指定Tinker版本，这样只需修改此处版本号就能更改Tinker版本。加入以下属性：\n\n``` ini\nTINKER_VERSION=1.7.7\n```\n\n 2. 在项目的**build.gradle**中，添加*tinker-patch-gradle-plugin*的依赖\n\n``` nginx\n  classpath \"com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}\"\n```\n\n 3. 然后在app的gradle文件**app/build.gradle**，我们需要添加tinker的库依赖以及apply tinker的gradle插件.\n\n``` nix\n    compile(\"com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}\") { changing = true }\n    provided(\"com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}\") { changing = true }\n```\n其中，**tinker-android-anno**用于注解生成application类 \n**tinker-android-lib**为tinker的核心库\n 4. 在app的gradle文件**app/build.gradle**配置**tinkerPatch task**，下面给出简单的示例：\n //全局信息相关的配置项\n\n``` groovy\ntinkerPatch {\n    //有问题的apk的地址  准apk包的路径，必须输入，否则会报错\n    oldApk = \"/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk\"\n    //\n    ignoreWarning = false\n    //在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名\n    useSign = true\n    //编译相关的配置项\n    buildConfig {\n        //在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。\n        // 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。\n        tinkerId = \"1.0\"\n    }\n    //用于生成补丁包中的'package_meta.txt'文件\n    packageConfig {\n        //onfigField(\"key\", \"value\"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。\n        // 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。\n        // 但是建议直接通过修改代码来实现，例如BuildConfig。\n//        configField(\"TINKER_ID\", \"1.0\")\n    }\n    //dex相关的配置项\n    dex {\n        //只能是'raw'或者'jar'。\n        //对于'raw'模式，我们将会保持输入dex的格式。\n        //对于'jar'模式，我们将会把输入dex重新压缩封装到jar。\n        // 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()\n        dexMode = \"jar\"\n        //需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...\n        pattern = [\"classes*.dex\", \"assets/secondary-dex-?.jar\"]\n        //它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。\n        loader = [\"com.tencent.tinker.loader.*\", \"com.cn21.tinkertest.MyApplication\"]\n        /**\n         * 这里需要定义的类有：\n         1. 你自己定义的Application类；\n         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；\n         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；\n         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，\n         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。\n         */\n    }\n    //lib相关的配置项\n    lib {\n        //需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...\n        pattern = [\"lib/armeabi/*.so\", \"lib/arm64-v8a/*.so\", \"lib/armeabi-v7a/*.so\", \"lib/mips/*.so\", \"lib/mips64/*.so\", \"lib/x86/*.so\", \"lib/x86_64/*.so\"]\n    }\n    //res相关的配置项\n    res {\n        pattern = [\"res/*\", \"assets/*\", \"resources.arsc\", \"AndroidManifest.xml\"]\n        //对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。\n        // 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb\n        largeModSize = 100\n    }\n    //7zip路径配置项，执行前提是useSign为true\n    sevenZip {\n        //例如\"com.tencent.mm:SevenZip:1.1.10\"，将自动根据机器属性获得对应的7za运行文件，推荐使用。\n        zipArtifact = \"com.tencent.mm:SevenZip:1.1.10\"\n    }\n}\n```\n上面只是使用了部分tinker参数，全部参数及含义可参考[tinkerPatch gradle参数官方wiki][3]\n\n### 2. 修改Application类\n 1. 修改工程的Application类，使其继承自**DefaultApplicationLike**，然后生成默认的构造方法，并覆盖**onBaseContextAttached**方法，然后添加一个**registerActivityLifecycleCallbacks**方法，同时在自己的Application类上加上以下注解：\n\n``` nix\n @DefaultLifeCycle(application = \"com.cn21.tinkertest.MyApplication\",\n        flags = ShareConstants.TINKER_ENABLE_ALL,\n        loadVerifyFlag = false)\n```\n其中，\n\n - **application**属性指定的是tinker为我们生成的真正的Application，一般是**包名＋自定义的Application名称**作为名字，其中application属性指定的是tinker为我们生成的真正的Application类，需要注意两点，一是AndroidManifest.xml 中的application节点下的name 属性必须是这个application属性的值。As找不到这个Application报错但不会影响编译成功；二是在**app/build.gradle**文件中的tinkerPatch-dex-loader节点中添加application属性的值（见tinkerPatch gradle配置）。\n - **flags**属性指定tinker可以修复的范围，*TINKER_ENABLE_ALL*是全部都可以修复，还有*TINKER_DEX_AND_LIBRARY*，*TINKER_RESOURCE_MASK*，*TINKER_DEX_MASK*等等，根据名字就可以知道所代表的含义。\n\n\n以下是完整的自定义Application代码：\n\n``` java\n@DefaultLifeCycle(application = \"com.cn21.tinkertest.MyApplication\",\n        flags = ShareConstants.TINKER_ENABLE_ALL,\n        loadVerifyFlag = false)\npublic class TinkerTestApplicarion extends DefaultApplicationLike {\n\n    public TinkerTestApplicarion(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) {\n        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);\n    }\n\n    /**\n     *  install tinker\n     * @param base\n     */\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n    @Override\n    public void onBaseContextAttached(Context base) {\n        super.onBaseContextAttached(base);\n        TinkerInstaller.install(this);\n    }\n\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n    public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) {\n        getApplication().registerActivityLifecycleCallbacks(callback);\n    }\n}\n```\n### 3. 使用tinker生成补丁\n到此，配置已经基本完成了。下面开始使用。\n 1. 首先编译运行一次工程，将生成的apk保存备份在除了build/output/apk以外的文件夹，tinker会读取这个旧的apk与新的apk进行比较生成补丁，同时需要修改**app/build.gradle**文件中oldApk的路径。\n 2. 修改工程中代码或者资源，然后打开As gradle任务栏，找到**tinker任务**那一项，选择对应的tinker任务运行\n\n![enter description here][4]\n\n然后在build/outputs/tinkerPatch目录下会生成补丁包与相关日志。将补丁包**patch_signed_7zip.apk**push到手机的sdcard目录，此时就可以在工程需要的地方调用tinker 的补丁加载方法了\n\n``` java\nTinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + \"/patch_signed_7zip.apk\");\n```\n因为需要读取sdcard中的文件，因此读写权限必须要配置。\n如果补丁加载成功，可以在logcat中看到以下信息\n\n![enter description here][5]\n需要注意的是，tinker默认补丁成功后会杀死应用，因此如果有需要则自定义ResultService继承自**DefaultTinkerResultService**，修改补丁成功后的行为\n 3. 重启应用则可以看到打补丁后的效果。\n\n更详尽的tinker知识请参考tinker [Github主页][6]，包括tinker源码与使用示例都可以看到\n\n## Tinker接入其他问题\n### 1. 开启multidex支持\n如果项目需要用到multidex则需要在gradle中添加multidex依赖，\n\n``` gradle\n compile \"com.android.support:multidex:1.0.1\"\n```\n在android-defaultConfig节点中添加\n\n``` nginx\n multiDexEnabled true\n```\n在Application初始化tinker之前加入\n\n``` cmake\n MultiDex.install(base);\n```\n### 2. 多渠道打包\ntinker默认是每个渠道生成一个对应的补丁包，这样子会造成空间浪费和发布的时候容易出错。因此官方推荐使用[packer-ng-plugin][7]工具进行多渠道打包。\n\n### 3. 资源混淆\n如果应用使用了[AndResGuard][8]混淆资源文件，编译流程需要做特殊处理，具体请参考[这篇文章][9]\n\n### 4. 应用加固\ntinker1.7.6之后不再支持加固\n\n### 5.tinker与instant run的兼容问题\n事实上，若编译时都使用assemble*, tinker与instant run是可以兼容的。但是不少用户基础包与补丁包混用两种模式导致补丁过大，所以tinker编译时禁用instant run，我们可以在设置中禁用instant run或使用assemble方式编译。\n\n大家日常debug时若想开启instant run功能，可以将tinker暂时关闭：\n\n``` objectivec\next {\n    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?\n    tinkerEnabled = false\n}\n```\n更多常见问题请参见[官方wiki][10]\n\n\n  [1]: http://om2bpqram.bkt.clouddn.com/1488428148337.jpg\n  [2]: https://github.com/fourbrother/Robust\n  [3]: https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\n  [4]: http://om2bpqram.bkt.clouddn.com/1488428191026.jpg\n  [5]: http://om2bpqram.bkt.clouddn.com/1488428245626.jpg\n  [6]: https://github.com/Tencent/tinker\n  [7]: https://github.com/mcxiaoke/packer-ng-plugin\n  [8]: https://github.com/shwenzhang/AndResGuard\n  [9]: http://www.cnblogs.com/yyangblog/p/6268818.html\n  [10]: https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98","slug":"Tinker调研","published":1,"updated":"2017-03-03T11:04:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztpt9ld00023qvcpnttkte8","content":"<h2 id=\"Tinker与其他热修复框架对比\"><a href=\"#Tinker与其他热修复框架对比\" class=\"headerlink\" title=\"Tinker与其他热修复框架对比\"></a>Tinker与其他热修复框架对比</h2><p><img src=\"http://om2bpqram.bkt.clouddn.com/1488428148337.jpg\" alt=\"\"></p>\n<p><strong>总结</strong>：</p>\n<ol>\n<li><strong>阿里的AndFix</strong>作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；</li>\n<li><strong>美团的Robust</strong>兼容性与成功率最高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案，并且尚未开源，不过有参照Robust的install run原理实现的<a href=\"https://github.com/fourbrother/Robust\" target=\"_blank\" rel=\"external\">开源方案</a>，不过较少人关注，实际效果未知。</li>\n<li><strong>百度金融的RocooFix</strong>是Nuwa方案的改良版，增加了lib替换和即时生效支持，但是不支持在windows平台生成补丁，兼容性还有待测试。</li>\n<li><strong>饿了么的Amigo</strong>是非常强大的一个方案，不仅是类替换，lib替换，资源替换都支持，同时也支持新增四大组件，缺点是不支持Android 3.0 ，notification &amp; widget中RemoteViews的自定义布局不支持修改,只支持内容修复。</li>\n</ol>\n<p>Amigo官方wiki介绍</p>\n<blockquote>\n<p>Amigo 原理与 QQZone<br>的方案有些类似，QQZone,Tinker,Nuwa这类方案是通过修改PathClassLoader中的dex实现的，Amigo则是釜底抽薪直接替换ClassLoader。同时进一步实现了<br>so 文件、资源文件、四大组件的修复，可以对APP全面进行修复</p>\n</blockquote>\n<ol>\n<li><strong>微信的Tinker</strong>是各方面都比较优秀的方案，毕竟经过了几亿微信用户的验证。Tinker的优点上图已经很明确了，而存在的缺陷有以下几方面：</li>\n</ol>\n<ul>\n<li>Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；  </li>\n<li>由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；</li>\n<li>在Android N上，补丁对应用启动时间有轻微的影响；</li>\n<li>不支持部分三星android-21机型，加载补丁时会主动抛出”TinkerRuntimeException:checkDexInstall failed”；</li>\n<li>由于各个厂商的加固实现并不一致，在1.7.6以及之后的版本，tinker不再支持加固的动态更新；（由于360电子市场必须经过加固应用才能上架，因此可以说tinker无法在360渠道上的apk实现热更新）</li>\n<li>对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。</li>\n<li>与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。</li>\n<li>需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。</li>\n<li>合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。</li>\n<li>接入tinker sdk略微复杂</li>\n</ul>\n<h2 id=\"Tinker接入\"><a href=\"#Tinker接入\" class=\"headerlink\" title=\"Tinker接入\"></a>Tinker接入</h2><h3 id=\"1-添加gradle依赖\"><a href=\"#1-添加gradle依赖\" class=\"headerlink\" title=\"1. 添加gradle依赖\"></a>1. 添加gradle依赖</h3><ol>\n<li>首先在项目的<strong>gradle.properties</strong>文件指定Tinker版本，这样只需修改此处版本号就能更改Tinker版本。加入以下属性：</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">TINKER_VERSION</span>=<span class=\"number\">1.7</span>.<span class=\"number\">7</span></div></pre></td></tr></table></figure>\n<ol>\n<li>在项目的<strong>build.gradle</strong>中，添加<em>tinker-patch-gradle-plugin</em>的依赖</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">classpath</span> <span class=\"string\">\"com.tencent.tinker:tinker-patch-gradle-plugin:<span class=\"variable\">$&#123;TINKER_VERSION&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>然后在app的gradle文件<strong>app/build.gradle</strong>，我们需要添加tinker的库依赖以及apply tinker的gradle插件.</li>\n</ol>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile(<span class=\"string\">\"com.tencent.tinker:tinker-android-lib:<span class=\"subst\">$&#123;TINKER_VERSION&#125;</span>\"</span>) &#123; <span class=\"attr\">changing</span> = <span class=\"literal\">true</span> &#125;</div><div class=\"line\">provided(<span class=\"string\">\"com.tencent.tinker:tinker-android-anno:<span class=\"subst\">$&#123;TINKER_VERSION&#125;</span>\"</span>) &#123; <span class=\"attr\">changing</span> = <span class=\"literal\">true</span> &#125;</div></pre></td></tr></table></figure>\n<p>其中，<strong>tinker-android-anno</strong>用于注解生成application类<br><strong>tinker-android-lib</strong>为tinker的核心库</p>\n<ol>\n<li>在app的gradle文件<strong>app/build.gradle</strong>配置<strong>tinkerPatch task</strong>，下面给出简单的示例：<br>//全局信息相关的配置项</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">tinkerPatch &#123;</div><div class=\"line\">    <span class=\"comment\">//有问题的apk的地址  准apk包的路径，必须输入，否则会报错</span></div><div class=\"line\">    oldApk = <span class=\"string\">\"/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk\"</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    ignoreWarning = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"comment\">//在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名</span></div><div class=\"line\">    useSign = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"comment\">//编译相关的配置项</span></div><div class=\"line\">    buildConfig &#123;</div><div class=\"line\">        <span class=\"comment\">//在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。</span></div><div class=\"line\">        <span class=\"comment\">// 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。</span></div><div class=\"line\">        tinkerId = <span class=\"string\">\"1.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//用于生成补丁包中的'package_meta.txt'文件</span></div><div class=\"line\">    packageConfig &#123;</div><div class=\"line\">        <span class=\"comment\">//onfigField(\"key\", \"value\"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。</span></div><div class=\"line\">        <span class=\"comment\">// 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。</span></div><div class=\"line\">        <span class=\"comment\">// 但是建议直接通过修改代码来实现，例如BuildConfig。</span></div><div class=\"line\"><span class=\"comment\">//        configField(\"TINKER_ID\", \"1.0\")</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//dex相关的配置项</span></div><div class=\"line\">    dex &#123;</div><div class=\"line\">        <span class=\"comment\">//只能是'raw'或者'jar'。</span></div><div class=\"line\">        <span class=\"comment\">//对于'raw'模式，我们将会保持输入dex的格式。</span></div><div class=\"line\">        <span class=\"comment\">//对于'jar'模式，我们将会把输入dex重新压缩封装到jar。</span></div><div class=\"line\">        <span class=\"comment\">// 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()</span></div><div class=\"line\">        dexMode = <span class=\"string\">\"jar\"</span></div><div class=\"line\">        <span class=\"comment\">//需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...</span></div><div class=\"line\">        pattern = [<span class=\"string\">\"classes*.dex\"</span>, <span class=\"string\">\"assets/secondary-dex-?.jar\"</span>]</div><div class=\"line\">        <span class=\"comment\">//它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。</span></div><div class=\"line\">        loader = [<span class=\"string\">\"com.tencent.tinker.loader.*\"</span>, <span class=\"string\">\"com.cn21.tinkertest.MyApplication\"</span>]</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 这里需要定义的类有：</div><div class=\"line\">         1. 你自己定义的Application类；</div><div class=\"line\">         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；</div><div class=\"line\">         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；</div><div class=\"line\">         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，</div><div class=\"line\">         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。</div><div class=\"line\">         */</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//lib相关的配置项</span></div><div class=\"line\">    lib &#123;</div><div class=\"line\">        <span class=\"comment\">//需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...</span></div><div class=\"line\">        pattern = [<span class=\"string\">\"lib/armeabi/*.so\"</span>, <span class=\"string\">\"lib/arm64-v8a/*.so\"</span>, <span class=\"string\">\"lib/armeabi-v7a/*.so\"</span>, <span class=\"string\">\"lib/mips/*.so\"</span>, <span class=\"string\">\"lib/mips64/*.so\"</span>, <span class=\"string\">\"lib/x86/*.so\"</span>, <span class=\"string\">\"lib/x86_64/*.so\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//res相关的配置项</span></div><div class=\"line\">    res &#123;</div><div class=\"line\">        pattern = [<span class=\"string\">\"res/*\"</span>, <span class=\"string\">\"assets/*\"</span>, <span class=\"string\">\"resources.arsc\"</span>, <span class=\"string\">\"AndroidManifest.xml\"</span>]</div><div class=\"line\">        <span class=\"comment\">//对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。</span></div><div class=\"line\">        <span class=\"comment\">// 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb</span></div><div class=\"line\">        largeModSize = <span class=\"number\">100</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//7zip路径配置项，执行前提是useSign为true</span></div><div class=\"line\">    sevenZip &#123;</div><div class=\"line\">        <span class=\"comment\">//例如\"com.tencent.mm:SevenZip:1.1.10\"，将自动根据机器属性获得对应的7za运行文件，推荐使用。</span></div><div class=\"line\">        zipArtifact = <span class=\"string\">\"com.tencent.mm:SevenZip:1.1.10\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面只是使用了部分tinker参数，全部参数及含义可参考<a href=\"https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"external\">tinkerPatch gradle参数官方wiki</a></p>\n<h3 id=\"2-修改Application类\"><a href=\"#2-修改Application类\" class=\"headerlink\" title=\"2. 修改Application类\"></a>2. 修改Application类</h3><ol>\n<li>修改工程的Application类，使其继承自<strong>DefaultApplicationLike</strong>，然后生成默认的构造方法，并覆盖<strong>onBaseContextAttached</strong>方法，然后添加一个<strong>registerActivityLifecycleCallbacks</strong>方法，同时在自己的Application类上加上以下注解：</li>\n</ol>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@DefaultLifeCycle(<span class=\"attr\">application</span> = <span class=\"string\">\"com.cn21.tinkertest.MyApplication\"</span>,</div><div class=\"line\">       <span class=\"attr\">flags</span> = ShareConstants.TINKER_ENABLE_ALL,</div><div class=\"line\">       <span class=\"attr\">loadVerifyFlag</span> = <span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><strong>application</strong>属性指定的是tinker为我们生成的真正的Application，一般是<strong>包名＋自定义的Application名称</strong>作为名字，其中application属性指定的是tinker为我们生成的真正的Application类，需要注意两点，一是AndroidManifest.xml 中的application节点下的name 属性必须是这个application属性的值。As找不到这个Application报错但不会影响编译成功；二是在<strong>app/build.gradle</strong>文件中的tinkerPatch-dex-loader节点中添加application属性的值（见tinkerPatch gradle配置）。</li>\n<li><strong>flags</strong>属性指定tinker可以修复的范围，<em>TINKER_ENABLE_ALL</em>是全部都可以修复，还有<em>TINKER_DEX_AND_LIBRARY</em>，<em>TINKER_RESOURCE_MASK</em>，<em>TINKER_DEX_MASK</em>等等，根据名字就可以知道所代表的含义。</li>\n</ul>\n<p>以下是完整的自定义Application代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DefaultLifeCycle</span>(application = <span class=\"string\">\"com.cn21.tinkertest.MyApplication\"</span>,</div><div class=\"line\">        flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class=\"line\">        loadVerifyFlag = <span class=\"keyword\">false</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TinkerTestApplicarion</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultApplicationLike</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TinkerTestApplicarion</span><span class=\"params\">(Application application, <span class=\"keyword\">int</span> tinkerFlags, <span class=\"keyword\">boolean</span> tinkerLoadVerifyFlag, <span class=\"keyword\">long</span> applicationStartElapsedTime, <span class=\"keyword\">long</span> applicationStartMillisTime, Intent tinkerResultIntent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *  install tinker</div><div class=\"line\">     * <span class=\"doctag\">@param</span> base</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBaseContextAttached</span><span class=\"params\">(Context base)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onBaseContextAttached(base);</div><div class=\"line\">        TinkerInstaller.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerActivityLifecycleCallbacks</span><span class=\"params\">(Application.ActivityLifecycleCallbacks callback)</span> </span>&#123;</div><div class=\"line\">        getApplication().registerActivityLifecycleCallbacks(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-使用tinker生成补丁\"><a href=\"#3-使用tinker生成补丁\" class=\"headerlink\" title=\"3. 使用tinker生成补丁\"></a>3. 使用tinker生成补丁</h3><p>到此，配置已经基本完成了。下面开始使用。</p>\n<ol>\n<li>首先编译运行一次工程，将生成的apk保存备份在除了build/output/apk以外的文件夹，tinker会读取这个旧的apk与新的apk进行比较生成补丁，同时需要修改<strong>app/build.gradle</strong>文件中oldApk的路径。</li>\n<li>修改工程中代码或者资源，然后打开As gradle任务栏，找到<strong>tinker任务</strong>那一项，选择对应的tinker任务运行</li>\n</ol>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488428191026.jpg\" alt=\"enter description here\"></p>\n<p>然后在build/outputs/tinkerPatch目录下会生成补丁包与相关日志。将补丁包<strong>patch_signed_7zip.apk</strong>push到手机的sdcard目录，此时就可以在工程需要的地方调用tinker 的补丁加载方法了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + <span class=\"string\">\"/patch_signed_7zip.apk\"</span>);</div></pre></td></tr></table></figure>\n<p>因为需要读取sdcard中的文件，因此读写权限必须要配置。<br>如果补丁加载成功，可以在logcat中看到以下信息</p>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488428245626.jpg\" alt=\"enter description here\"><br>需要注意的是，tinker默认补丁成功后会杀死应用，因此如果有需要则自定义ResultService继承自<strong>DefaultTinkerResultService</strong>，修改补丁成功后的行为</p>\n<ol>\n<li>重启应用则可以看到打补丁后的效果。</li>\n</ol>\n<p>更详尽的tinker知识请参考tinker <a href=\"https://github.com/Tencent/tinker\" target=\"_blank\" rel=\"external\">Github主页</a>，包括tinker源码与使用示例都可以看到</p>\n<h2 id=\"Tinker接入其他问题\"><a href=\"#Tinker接入其他问题\" class=\"headerlink\" title=\"Tinker接入其他问题\"></a>Tinker接入其他问题</h2><h3 id=\"1-开启multidex支持\"><a href=\"#1-开启multidex支持\" class=\"headerlink\" title=\"1. 开启multidex支持\"></a>1. 开启multidex支持</h3><p>如果项目需要用到multidex则需要在gradle中添加multidex依赖，</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">compile</span> <span class=\"string\">\"com.android.support:multidex:1.0.1\"</span></div></pre></td></tr></table></figure>\n<p>在android-defaultConfig节点中添加</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">multiDexEnabled</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>在Application初始化tinker之前加入</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MultiDex.<span class=\"keyword\">install</span>(base);</div></pre></td></tr></table></figure>\n<h3 id=\"2-多渠道打包\"><a href=\"#2-多渠道打包\" class=\"headerlink\" title=\"2. 多渠道打包\"></a>2. 多渠道打包</h3><p>tinker默认是每个渠道生成一个对应的补丁包，这样子会造成空间浪费和发布的时候容易出错。因此官方推荐使用<a href=\"https://github.com/mcxiaoke/packer-ng-plugin\" target=\"_blank\" rel=\"external\">packer-ng-plugin</a>工具进行多渠道打包。</p>\n<h3 id=\"3-资源混淆\"><a href=\"#3-资源混淆\" class=\"headerlink\" title=\"3. 资源混淆\"></a>3. 资源混淆</h3><p>如果应用使用了<a href=\"https://github.com/shwenzhang/AndResGuard\" target=\"_blank\" rel=\"external\">AndResGuard</a>混淆资源文件，编译流程需要做特殊处理，具体请参考<a href=\"http://www.cnblogs.com/yyangblog/p/6268818.html\" target=\"_blank\" rel=\"external\">这篇文章</a></p>\n<h3 id=\"4-应用加固\"><a href=\"#4-应用加固\" class=\"headerlink\" title=\"4. 应用加固\"></a>4. 应用加固</h3><p>tinker1.7.6之后不再支持加固</p>\n<h3 id=\"5-tinker与instant-run的兼容问题\"><a href=\"#5-tinker与instant-run的兼容问题\" class=\"headerlink\" title=\"5.tinker与instant run的兼容问题\"></a>5.tinker与instant run的兼容问题</h3><p>事实上，若编译时都使用assemble*, tinker与instant run是可以兼容的。但是不少用户基础包与补丁包混用两种模式导致补丁过大，所以tinker编译时禁用instant run，我们可以在设置中禁用instant run或使用assemble方式编译。</p>\n<p>大家日常debug时若想开启instant run功能，可以将tinker暂时关闭：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext &#123;</div><div class=\"line\">    <span class=\"comment\">//for some reason, you may want to ignore tinkerBuild, such as instant run debug build?</span></div><div class=\"line\">    tinkerEnabled = <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多常见问题请参见<a href=\"https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"external\">官方wiki</a></p>\n","excerpt":"","more":"<h2 id=\"Tinker与其他热修复框架对比\"><a href=\"#Tinker与其他热修复框架对比\" class=\"headerlink\" title=\"Tinker与其他热修复框架对比\"></a>Tinker与其他热修复框架对比</h2><p><img src=\"http://om2bpqram.bkt.clouddn.com/1488428148337.jpg\" alt=\"\"></p>\n<p><strong>总结</strong>：</p>\n<ol>\n<li><strong>阿里的AndFix</strong>作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；</li>\n<li><strong>美团的Robust</strong>兼容性与成功率最高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案，并且尚未开源，不过有参照Robust的install run原理实现的<a href=\"https://github.com/fourbrother/Robust\">开源方案</a>，不过较少人关注，实际效果未知。</li>\n<li><strong>百度金融的RocooFix</strong>是Nuwa方案的改良版，增加了lib替换和即时生效支持，但是不支持在windows平台生成补丁，兼容性还有待测试。</li>\n<li><strong>饿了么的Amigo</strong>是非常强大的一个方案，不仅是类替换，lib替换，资源替换都支持，同时也支持新增四大组件，缺点是不支持Android 3.0 ，notification &amp; widget中RemoteViews的自定义布局不支持修改,只支持内容修复。</li>\n</ol>\n<p>Amigo官方wiki介绍</p>\n<blockquote>\n<p>Amigo 原理与 QQZone<br>的方案有些类似，QQZone,Tinker,Nuwa这类方案是通过修改PathClassLoader中的dex实现的，Amigo则是釜底抽薪直接替换ClassLoader。同时进一步实现了<br>so 文件、资源文件、四大组件的修复，可以对APP全面进行修复</p>\n</blockquote>\n<ol>\n<li><strong>微信的Tinker</strong>是各方面都比较优秀的方案，毕竟经过了几亿微信用户的验证。Tinker的优点上图已经很明确了，而存在的缺陷有以下几方面：</li>\n</ol>\n<ul>\n<li>Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；  </li>\n<li>由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；</li>\n<li>在Android N上，补丁对应用启动时间有轻微的影响；</li>\n<li>不支持部分三星android-21机型，加载补丁时会主动抛出”TinkerRuntimeException:checkDexInstall failed”；</li>\n<li>由于各个厂商的加固实现并不一致，在1.7.6以及之后的版本，tinker不再支持加固的动态更新；（由于360电子市场必须经过加固应用才能上架，因此可以说tinker无法在360渠道上的apk实现热更新）</li>\n<li>对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。</li>\n<li>与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。</li>\n<li>需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。</li>\n<li>合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。</li>\n<li>接入tinker sdk略微复杂</li>\n</ul>\n<h2 id=\"Tinker接入\"><a href=\"#Tinker接入\" class=\"headerlink\" title=\"Tinker接入\"></a>Tinker接入</h2><h3 id=\"1-添加gradle依赖\"><a href=\"#1-添加gradle依赖\" class=\"headerlink\" title=\"1. 添加gradle依赖\"></a>1. 添加gradle依赖</h3><ol>\n<li>首先在项目的<strong>gradle.properties</strong>文件指定Tinker版本，这样只需修改此处版本号就能更改Tinker版本。加入以下属性：</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">TINKER_VERSION</span>=<span class=\"number\">1.7</span>.<span class=\"number\">7</span></div></pre></td></tr></table></figure>\n<ol>\n<li>在项目的<strong>build.gradle</strong>中，添加<em>tinker-patch-gradle-plugin</em>的依赖</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">classpath</span> <span class=\"string\">\"com.tencent.tinker:tinker-patch-gradle-plugin:<span class=\"variable\">$&#123;TINKER_VERSION&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>然后在app的gradle文件<strong>app/build.gradle</strong>，我们需要添加tinker的库依赖以及apply tinker的gradle插件.</li>\n</ol>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile(<span class=\"string\">\"com.tencent.tinker:tinker-android-lib:<span class=\"subst\">$&#123;TINKER_VERSION&#125;</span>\"</span>) &#123; <span class=\"attr\">changing</span> = <span class=\"literal\">true</span> &#125;</div><div class=\"line\">provided(<span class=\"string\">\"com.tencent.tinker:tinker-android-anno:<span class=\"subst\">$&#123;TINKER_VERSION&#125;</span>\"</span>) &#123; <span class=\"attr\">changing</span> = <span class=\"literal\">true</span> &#125;</div></pre></td></tr></table></figure>\n<p>其中，<strong>tinker-android-anno</strong>用于注解生成application类<br><strong>tinker-android-lib</strong>为tinker的核心库</p>\n<ol>\n<li>在app的gradle文件<strong>app/build.gradle</strong>配置<strong>tinkerPatch task</strong>，下面给出简单的示例：<br>//全局信息相关的配置项</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">tinkerPatch &#123;</div><div class=\"line\">    <span class=\"comment\">//有问题的apk的地址  准apk包的路径，必须输入，否则会报错</span></div><div class=\"line\">    oldApk = <span class=\"string\">\"/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk\"</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    ignoreWarning = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"comment\">//在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名</span></div><div class=\"line\">    useSign = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"comment\">//编译相关的配置项</span></div><div class=\"line\">    buildConfig &#123;</div><div class=\"line\">        <span class=\"comment\">//在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。</span></div><div class=\"line\">        <span class=\"comment\">// 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。</span></div><div class=\"line\">        tinkerId = <span class=\"string\">\"1.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//用于生成补丁包中的'package_meta.txt'文件</span></div><div class=\"line\">    packageConfig &#123;</div><div class=\"line\">        <span class=\"comment\">//onfigField(\"key\", \"value\"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。</span></div><div class=\"line\">        <span class=\"comment\">// 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。</span></div><div class=\"line\">        <span class=\"comment\">// 但是建议直接通过修改代码来实现，例如BuildConfig。</span></div><div class=\"line\"><span class=\"comment\">//        configField(\"TINKER_ID\", \"1.0\")</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//dex相关的配置项</span></div><div class=\"line\">    dex &#123;</div><div class=\"line\">        <span class=\"comment\">//只能是'raw'或者'jar'。</span></div><div class=\"line\">        <span class=\"comment\">//对于'raw'模式，我们将会保持输入dex的格式。</span></div><div class=\"line\">        <span class=\"comment\">//对于'jar'模式，我们将会把输入dex重新压缩封装到jar。</span></div><div class=\"line\">        <span class=\"comment\">// 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()</span></div><div class=\"line\">        dexMode = <span class=\"string\">\"jar\"</span></div><div class=\"line\">        <span class=\"comment\">//需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...</span></div><div class=\"line\">        pattern = [<span class=\"string\">\"classes*.dex\"</span>, <span class=\"string\">\"assets/secondary-dex-?.jar\"</span>]</div><div class=\"line\">        <span class=\"comment\">//它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。</span></div><div class=\"line\">        loader = [<span class=\"string\">\"com.tencent.tinker.loader.*\"</span>, <span class=\"string\">\"com.cn21.tinkertest.MyApplication\"</span>]</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 这里需要定义的类有：</div><div class=\"line\">         1. 你自己定义的Application类；</div><div class=\"line\">         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；</div><div class=\"line\">         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；</div><div class=\"line\">         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，</div><div class=\"line\">         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。</div><div class=\"line\">         */</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//lib相关的配置项</span></div><div class=\"line\">    lib &#123;</div><div class=\"line\">        <span class=\"comment\">//需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...</span></div><div class=\"line\">        pattern = [<span class=\"string\">\"lib/armeabi/*.so\"</span>, <span class=\"string\">\"lib/arm64-v8a/*.so\"</span>, <span class=\"string\">\"lib/armeabi-v7a/*.so\"</span>, <span class=\"string\">\"lib/mips/*.so\"</span>, <span class=\"string\">\"lib/mips64/*.so\"</span>, <span class=\"string\">\"lib/x86/*.so\"</span>, <span class=\"string\">\"lib/x86_64/*.so\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//res相关的配置项</span></div><div class=\"line\">    res &#123;</div><div class=\"line\">        pattern = [<span class=\"string\">\"res/*\"</span>, <span class=\"string\">\"assets/*\"</span>, <span class=\"string\">\"resources.arsc\"</span>, <span class=\"string\">\"AndroidManifest.xml\"</span>]</div><div class=\"line\">        <span class=\"comment\">//对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。</span></div><div class=\"line\">        <span class=\"comment\">// 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb</span></div><div class=\"line\">        largeModSize = <span class=\"number\">100</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//7zip路径配置项，执行前提是useSign为true</span></div><div class=\"line\">    sevenZip &#123;</div><div class=\"line\">        <span class=\"comment\">//例如\"com.tencent.mm:SevenZip:1.1.10\"，将自动根据机器属性获得对应的7za运行文件，推荐使用。</span></div><div class=\"line\">        zipArtifact = <span class=\"string\">\"com.tencent.mm:SevenZip:1.1.10\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面只是使用了部分tinker参数，全部参数及含义可参考<a href=\"https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\">tinkerPatch gradle参数官方wiki</a></p>\n<h3 id=\"2-修改Application类\"><a href=\"#2-修改Application类\" class=\"headerlink\" title=\"2. 修改Application类\"></a>2. 修改Application类</h3><ol>\n<li>修改工程的Application类，使其继承自<strong>DefaultApplicationLike</strong>，然后生成默认的构造方法，并覆盖<strong>onBaseContextAttached</strong>方法，然后添加一个<strong>registerActivityLifecycleCallbacks</strong>方法，同时在自己的Application类上加上以下注解：</li>\n</ol>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@DefaultLifeCycle(<span class=\"attr\">application</span> = <span class=\"string\">\"com.cn21.tinkertest.MyApplication\"</span>,</div><div class=\"line\">       <span class=\"attr\">flags</span> = ShareConstants.TINKER_ENABLE_ALL,</div><div class=\"line\">       <span class=\"attr\">loadVerifyFlag</span> = <span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><strong>application</strong>属性指定的是tinker为我们生成的真正的Application，一般是<strong>包名＋自定义的Application名称</strong>作为名字，其中application属性指定的是tinker为我们生成的真正的Application类，需要注意两点，一是AndroidManifest.xml 中的application节点下的name 属性必须是这个application属性的值。As找不到这个Application报错但不会影响编译成功；二是在<strong>app/build.gradle</strong>文件中的tinkerPatch-dex-loader节点中添加application属性的值（见tinkerPatch gradle配置）。</li>\n<li><strong>flags</strong>属性指定tinker可以修复的范围，<em>TINKER_ENABLE_ALL</em>是全部都可以修复，还有<em>TINKER_DEX_AND_LIBRARY</em>，<em>TINKER_RESOURCE_MASK</em>，<em>TINKER_DEX_MASK</em>等等，根据名字就可以知道所代表的含义。</li>\n</ul>\n<p>以下是完整的自定义Application代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DefaultLifeCycle</span>(application = <span class=\"string\">\"com.cn21.tinkertest.MyApplication\"</span>,</div><div class=\"line\">        flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class=\"line\">        loadVerifyFlag = <span class=\"keyword\">false</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TinkerTestApplicarion</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultApplicationLike</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TinkerTestApplicarion</span><span class=\"params\">(Application application, <span class=\"keyword\">int</span> tinkerFlags, <span class=\"keyword\">boolean</span> tinkerLoadVerifyFlag, <span class=\"keyword\">long</span> applicationStartElapsedTime, <span class=\"keyword\">long</span> applicationStartMillisTime, Intent tinkerResultIntent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *  install tinker</div><div class=\"line\">     * <span class=\"doctag\">@param</span> base</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBaseContextAttached</span><span class=\"params\">(Context base)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onBaseContextAttached(base);</div><div class=\"line\">        TinkerInstaller.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerActivityLifecycleCallbacks</span><span class=\"params\">(Application.ActivityLifecycleCallbacks callback)</span> </span>&#123;</div><div class=\"line\">        getApplication().registerActivityLifecycleCallbacks(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-使用tinker生成补丁\"><a href=\"#3-使用tinker生成补丁\" class=\"headerlink\" title=\"3. 使用tinker生成补丁\"></a>3. 使用tinker生成补丁</h3><p>到此，配置已经基本完成了。下面开始使用。</p>\n<ol>\n<li>首先编译运行一次工程，将生成的apk保存备份在除了build/output/apk以外的文件夹，tinker会读取这个旧的apk与新的apk进行比较生成补丁，同时需要修改<strong>app/build.gradle</strong>文件中oldApk的路径。</li>\n<li>修改工程中代码或者资源，然后打开As gradle任务栏，找到<strong>tinker任务</strong>那一项，选择对应的tinker任务运行</li>\n</ol>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488428191026.jpg\" alt=\"enter description here\"></p>\n<p>然后在build/outputs/tinkerPatch目录下会生成补丁包与相关日志。将补丁包<strong>patch_signed_7zip.apk</strong>push到手机的sdcard目录，此时就可以在工程需要的地方调用tinker 的补丁加载方法了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + <span class=\"string\">\"/patch_signed_7zip.apk\"</span>);</div></pre></td></tr></table></figure>\n<p>因为需要读取sdcard中的文件，因此读写权限必须要配置。<br>如果补丁加载成功，可以在logcat中看到以下信息</p>\n<p><img src=\"http://om2bpqram.bkt.clouddn.com/1488428245626.jpg\" alt=\"enter description here\"><br>需要注意的是，tinker默认补丁成功后会杀死应用，因此如果有需要则自定义ResultService继承自<strong>DefaultTinkerResultService</strong>，修改补丁成功后的行为</p>\n<ol>\n<li>重启应用则可以看到打补丁后的效果。</li>\n</ol>\n<p>更详尽的tinker知识请参考tinker <a href=\"https://github.com/Tencent/tinker\">Github主页</a>，包括tinker源码与使用示例都可以看到</p>\n<h2 id=\"Tinker接入其他问题\"><a href=\"#Tinker接入其他问题\" class=\"headerlink\" title=\"Tinker接入其他问题\"></a>Tinker接入其他问题</h2><h3 id=\"1-开启multidex支持\"><a href=\"#1-开启multidex支持\" class=\"headerlink\" title=\"1. 开启multidex支持\"></a>1. 开启multidex支持</h3><p>如果项目需要用到multidex则需要在gradle中添加multidex依赖，</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">compile</span> <span class=\"string\">\"com.android.support:multidex:1.0.1\"</span></div></pre></td></tr></table></figure>\n<p>在android-defaultConfig节点中添加</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">multiDexEnabled</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>在Application初始化tinker之前加入</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MultiDex.<span class=\"keyword\">install</span>(base);</div></pre></td></tr></table></figure>\n<h3 id=\"2-多渠道打包\"><a href=\"#2-多渠道打包\" class=\"headerlink\" title=\"2. 多渠道打包\"></a>2. 多渠道打包</h3><p>tinker默认是每个渠道生成一个对应的补丁包，这样子会造成空间浪费和发布的时候容易出错。因此官方推荐使用<a href=\"https://github.com/mcxiaoke/packer-ng-plugin\">packer-ng-plugin</a>工具进行多渠道打包。</p>\n<h3 id=\"3-资源混淆\"><a href=\"#3-资源混淆\" class=\"headerlink\" title=\"3. 资源混淆\"></a>3. 资源混淆</h3><p>如果应用使用了<a href=\"https://github.com/shwenzhang/AndResGuard\">AndResGuard</a>混淆资源文件，编译流程需要做特殊处理，具体请参考<a href=\"http://www.cnblogs.com/yyangblog/p/6268818.html\">这篇文章</a></p>\n<h3 id=\"4-应用加固\"><a href=\"#4-应用加固\" class=\"headerlink\" title=\"4. 应用加固\"></a>4. 应用加固</h3><p>tinker1.7.6之后不再支持加固</p>\n<h3 id=\"5-tinker与instant-run的兼容问题\"><a href=\"#5-tinker与instant-run的兼容问题\" class=\"headerlink\" title=\"5.tinker与instant run的兼容问题\"></a>5.tinker与instant run的兼容问题</h3><p>事实上，若编译时都使用assemble*, tinker与instant run是可以兼容的。但是不少用户基础包与补丁包混用两种模式导致补丁过大，所以tinker编译时禁用instant run，我们可以在设置中禁用instant run或使用assemble方式编译。</p>\n<p>大家日常debug时若想开启instant run功能，可以将tinker暂时关闭：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext &#123;</div><div class=\"line\">    <span class=\"comment\">//for some reason, you may want to ignore tinkerBuild, such as instant run debug build?</span></div><div class=\"line\">    tinkerEnabled = <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多常见问题请参见<a href=\"https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">官方wiki</a></p>\n"},{"title":"openresty-rsa加解密库","date":"2016-08-20T08:53:22.000Z","description":"最近在项目中用到OpenResty做服务端的接口，其中接口认证方面又用到了RSA算法进行加解密。但是目前OpenResty并没有官方的rsa模块，只有doujiang24前辈提供的lua-resty-rsa库，但是该库只支持公钥加密私钥解密，对私钥加密公钥解密却不支持，为了完善这一方面的缺陷，开发了自己的rsa加解密库","_content":"\n因为lua相关的RSA加解密库比较少，而C和C++相关的RSA加解密库却比较多，因此萌生了通过LuaJit的FFI  拓展库来调用C或C++实现来封装成Lua 的RSA库。经过谷歌终于找到了一个很符合要求的实现方法：\nhttp://hayageek.com/rsa-encryption-decryption-openssl-c/\n\n下面就来说说整个开发详细流程\n\n## 安装OpenSSL\nRSA加密和解密的公钥私钥由OpenSSL生成。在Ubuntu下，安装OpenSSL通过以下两条命令可以完成：\n``` bash\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n## 生成公钥和私钥\n``` bash\n-- 生成 RSA 私钥（传统格式的,PKCS#1标准）\nopenssl genrsa -out rsa_private_key.pem 1024\n-- 将传统格式的私钥转换成 PKCS#8 格式的（JAVA需要使用的私钥需要经过PKCS#8编码,而本次在项目作为接口使用Lua编写，如不需要这一步其实可以略过）\nopenssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt\n-- 生成 RSA 公钥\nopenssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\n```\n\n## 编译动态链接库\n参考上面给的链接，要封装的RSA加解密C语言实现版如下：\nrsa.c文件\n``` c\n#include <openssl/pem.h>\n#include <openssl/ssl.h>\n#include <openssl/rsa.h>\n#include <openssl/evp.h>\n#include <openssl/bio.h>\n#include <openssl/err.h>\n#include <stdio.h>\n \nint padding = RSA_PKCS1_PADDING;\n \nRSA * createRSA(unsigned char * key,int public)\n{\n    RSA *rsa= NULL;\n    BIO *keybio ;\n    keybio = BIO_new_mem_buf(key, -1);\n    if (keybio==NULL)\n    {\n        printf( \"Failed to create key BIO\");\n        return 0;\n    }\n    if(public)\n    {\n        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &rsa,NULL, NULL);\n    }\n    else\n    {\n        rsa = PEM_read_bio_RSAPrivateKey(keybio, &rsa,NULL, NULL);\n    }\n    if(rsa == NULL)\n    {\n        printf( \"Failed to create RSA\");\n    }\n \n    return rsa;\n}\n \nint public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted)\n{\n    RSA * rsa = createRSA(key,1);\n    int result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);\n    return result;\n}\nint private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted)\n{\n    RSA * rsa = createRSA(key,0);\n    int  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);\n    return result;\n}\n \n \nint private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted)\n{\n    RSA * rsa = createRSA(key,0);\n    int result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);\n    return result;\n}\nint public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted)\n{\n    RSA * rsa = createRSA(key,1);\n    int  result = RSA_public_decrypt(data_len,enc_data,decrypted,rsa,padding);\n    return result;\n}\n \nvoid printLastError(char *msg)\n{\n    char * err = malloc(130);;\n    ERR_load_crypto_strings();\n    ERR_error_string(ERR_get_error(), err);\n    printf(\"%s ERROR: %s\\n\",msg, err);\n    free(err);\n}\n```\n在ubuntu下通过以下命令来生成.so库\n``` bash\n# gcc rsa.c -fPIC -shared -o librsa.so\n```\n\n## 使用rsa.so库\n生成的动态链接库放到**usr/lib**目录下就能使用了，以下使用rsa.so封装了一个lua版的rsa加解密库\n``` lua\nmodule(\"rsa\", package.seeall)\nlocal ffi = require('ffi')\n \nlocal rsa = ffi.load('rsa')\n \nffi.cdef [[\nint public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);\nint private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);\n \nint private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);\nint public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);\n]]\n \nlocal _M = { _VERSION = '1.0' }\n \n--公钥加密\nfunction _M.public_encrypt(msg, publicKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pub = ffi.new(\"char[?]\", #publicKey)\n    ffi.copy(pub, publicKey)\n    --存放加密结果\n    local encrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.public_encrypt(c_str, #msg, pub, encrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(encrypt,ret)\nend\n \n--私钥解密\nfunction _M.private_decrypt(msg, privateKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pri = ffi.new(\"char[?]\", #privateKey)\n    ffi.copy(pri, privateKey)\n    --存放解密结果\n    local decrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.private_decrypt(c_str, #msg, pri, decrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(decrypt,ret)\nend\n \n--私钥加密\nfunction _M.private_encrypt(msg, privateKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pri = ffi.new(\"char[?]\", #privateKey)\n    ffi.copy(pri, privateKey)\n    --存放加密结果\n    local encrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.private_encrypt(c_str, #msg, pri, encrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(encrypt,ret)\nend\n \n--公钥解密\nfunction _M.public_decrypt(msg, publicKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pub = ffi.new(\"char[?]\", #publicKey)\n    ffi.copy(pub, publicKey)\n    --存放解密结果\n    local decrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.public_decrypt(c_str, #msg, pub, decrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(decrypt,ret)\nend\n \nreturn _M\n```\n就这样，本人的openresty rsa加解密第三方库就制作完成了，支持公钥加密私钥解密，也支持私钥加密公钥解密。下面贴出本人的测试代码：\n``` lua\nlocal rsa = require \"resty.rsa\"\nlocal RSA_PUBLIC_KEY = [[-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3bTBJNQJjY6u7Y5b2eOWws0yW\nCGuWPm6MGOSVan65wCrJa5p3q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6\nieLkgbbeqTCzeJ0AryUXiF3auxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMN\nqWgmxiPVwupwAML7RQIDAQAB\n-----END PUBLIC KEY-----]]\nlocal RSA_PRIV_KEY = [[-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC3bTBJNQJjY6u7Y5b2eOWws0yWCGuWPm6MGOSVan65wCrJa5p3\nq3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6ieLkgbbeqTCzeJ0AryUXiF3a\nuxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMNqWgmxiPVwupwAML7RQIDAQAB\nAoGAc4NXvUKc1mqWY9Q75cwNGlJQEMwMtPlsNN4YVeBTHjdeuqoBBQwA62GGXqrN\nQpOBKl79ASGghob8n0j6aAY70PQqHSU4c06c7UlkeEvxJKlyUTO2UgnjjIHb2flR\nuW8y3xmjpXAfwe50eAVMNhCon7DBc+XMF/paSVwiG8V+GAECQQDvosVLImUkIXGf\nI2AJ2iSOUF8W1UZ5Ru68E8hJoVkNehk14RUFzTkwhoPHYDseZyEhSunFQbXCotlL\nAr5+O+lBAkEAw/PJXvi3S557ihDjYjKnj/2XtIa1GwBJxOliVM4eVjfRX15OXPR2\n6shID4ZNWfkWN3fjVm4CnUS41+bzHNctBQJAGCeiF3a6FzA/0bixH40bjjTPwO9y\nkRrzSYX89F8NKOybyfCMO+95ykhk1B4BF4lxr3drpPSAq8Paf1MhfHvxgQJBAJUB\n0WNy5o+OWItJBGAr/Ne2E6KnvRhnQ7GFd8zdYJxXndNTt2tgSv2Gh6WmjzOYApjz\nheC3jy1gkN89NCn+RrECQBTvoqFHfyAlwOGC9ulcAcQDqj/EgCRVkVe1IsQZenAe\nrKCWlUaeIKeVkRz/wzb1zy9AVsPC7Zbnf4nrOxJ23mI=\n-----END RSA PRIVATE KEY-----]]\n \nngx.say('-----公钥加密私钥解密 start------')\nlocal str='i love lwl'\n \nlocal encryptPubStr = rsa.public_encrypt(str, RSA_PUBLIC_KEY)\nif not encryptPubStr then\nngx.say('pub encrypt failed')\nend\nlocal decryptPriStr=rsa.private_decrypt(encryptPubStr,RSA_PRIV_KEY)\nif not decryptPriStr then\nngx.say('pri decrypt failed')\nend\nngx.say('公钥加密私钥解密成功\\n'..decryptPriStr)\nngx.say('-----公钥加密私钥解密 end------')\n \nngx.say('================================')\n \nngx.say('-----私钥加密公钥解密 start------')\nlocal str='i like lwl'\n \nlocal encryptPriStr = rsa.private_encrypt(str, RSA_PRIV_KEY)\nif not encryptPriStr then\nngx.say('pri encrypt failed')\nend\nlocal decryptPubStr=rsa.public_decrypt(encryptPriStr,RSA_PUBLIC_KEY)\nif not decryptPubStr then\nngx.say('pub decrypt failed')\nend\nngx.say('公钥加密私钥解密成功\\n'..decryptPubStr)\nngx.say('-----私钥加密公钥解密 end------')\n```\n项目已托管到Github，欢迎star或fork，也欢迎提出改进意见。\n传送门：[lua-rsa](https://github.com/LittleLiByte/lua-rsa)\n","source":"_posts/openresty-rsa加解密库.md","raw":"---\ntitle: openresty-rsa加解密库\ncategories: OpenResty\ntags: \n - RSA\n - Nginx\n - Lua\ndate: 2016-08-20 16:53:22\ndescription: \"最近在项目中用到OpenResty做服务端的接口，其中接口认证方面又用到了RSA算法进行加解密。但是目前OpenResty并没有官方的rsa模块，只有doujiang24前辈提供的lua-resty-rsa库，但是该库只支持公钥加密私钥解密，对私钥加密公钥解密却不支持，为了完善这一方面的缺陷，开发了自己的rsa加解密库\"\n---\n\n因为lua相关的RSA加解密库比较少，而C和C++相关的RSA加解密库却比较多，因此萌生了通过LuaJit的FFI  拓展库来调用C或C++实现来封装成Lua 的RSA库。经过谷歌终于找到了一个很符合要求的实现方法：\nhttp://hayageek.com/rsa-encryption-decryption-openssl-c/\n\n下面就来说说整个开发详细流程\n\n## 安装OpenSSL\nRSA加密和解密的公钥私钥由OpenSSL生成。在Ubuntu下，安装OpenSSL通过以下两条命令可以完成：\n``` bash\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n## 生成公钥和私钥\n``` bash\n-- 生成 RSA 私钥（传统格式的,PKCS#1标准）\nopenssl genrsa -out rsa_private_key.pem 1024\n-- 将传统格式的私钥转换成 PKCS#8 格式的（JAVA需要使用的私钥需要经过PKCS#8编码,而本次在项目作为接口使用Lua编写，如不需要这一步其实可以略过）\nopenssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt\n-- 生成 RSA 公钥\nopenssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\n```\n\n## 编译动态链接库\n参考上面给的链接，要封装的RSA加解密C语言实现版如下：\nrsa.c文件\n``` c\n#include <openssl/pem.h>\n#include <openssl/ssl.h>\n#include <openssl/rsa.h>\n#include <openssl/evp.h>\n#include <openssl/bio.h>\n#include <openssl/err.h>\n#include <stdio.h>\n \nint padding = RSA_PKCS1_PADDING;\n \nRSA * createRSA(unsigned char * key,int public)\n{\n    RSA *rsa= NULL;\n    BIO *keybio ;\n    keybio = BIO_new_mem_buf(key, -1);\n    if (keybio==NULL)\n    {\n        printf( \"Failed to create key BIO\");\n        return 0;\n    }\n    if(public)\n    {\n        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &rsa,NULL, NULL);\n    }\n    else\n    {\n        rsa = PEM_read_bio_RSAPrivateKey(keybio, &rsa,NULL, NULL);\n    }\n    if(rsa == NULL)\n    {\n        printf( \"Failed to create RSA\");\n    }\n \n    return rsa;\n}\n \nint public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted)\n{\n    RSA * rsa = createRSA(key,1);\n    int result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);\n    return result;\n}\nint private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted)\n{\n    RSA * rsa = createRSA(key,0);\n    int  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);\n    return result;\n}\n \n \nint private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted)\n{\n    RSA * rsa = createRSA(key,0);\n    int result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);\n    return result;\n}\nint public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted)\n{\n    RSA * rsa = createRSA(key,1);\n    int  result = RSA_public_decrypt(data_len,enc_data,decrypted,rsa,padding);\n    return result;\n}\n \nvoid printLastError(char *msg)\n{\n    char * err = malloc(130);;\n    ERR_load_crypto_strings();\n    ERR_error_string(ERR_get_error(), err);\n    printf(\"%s ERROR: %s\\n\",msg, err);\n    free(err);\n}\n```\n在ubuntu下通过以下命令来生成.so库\n``` bash\n# gcc rsa.c -fPIC -shared -o librsa.so\n```\n\n## 使用rsa.so库\n生成的动态链接库放到**usr/lib**目录下就能使用了，以下使用rsa.so封装了一个lua版的rsa加解密库\n``` lua\nmodule(\"rsa\", package.seeall)\nlocal ffi = require('ffi')\n \nlocal rsa = ffi.load('rsa')\n \nffi.cdef [[\nint public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);\nint private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);\n \nint private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);\nint public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);\n]]\n \nlocal _M = { _VERSION = '1.0' }\n \n--公钥加密\nfunction _M.public_encrypt(msg, publicKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pub = ffi.new(\"char[?]\", #publicKey)\n    ffi.copy(pub, publicKey)\n    --存放加密结果\n    local encrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.public_encrypt(c_str, #msg, pub, encrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(encrypt,ret)\nend\n \n--私钥解密\nfunction _M.private_decrypt(msg, privateKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pri = ffi.new(\"char[?]\", #privateKey)\n    ffi.copy(pri, privateKey)\n    --存放解密结果\n    local decrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.private_decrypt(c_str, #msg, pri, decrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(decrypt,ret)\nend\n \n--私钥加密\nfunction _M.private_encrypt(msg, privateKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pri = ffi.new(\"char[?]\", #privateKey)\n    ffi.copy(pri, privateKey)\n    --存放加密结果\n    local encrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.private_encrypt(c_str, #msg, pri, encrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(encrypt,ret)\nend\n \n--公钥解密\nfunction _M.public_decrypt(msg, publicKey)\n    local c_str = ffi.new(\"char[?]\", 1024 / 8)\n    ffi.copy(c_str, msg)\n    local pub = ffi.new(\"char[?]\", #publicKey)\n    ffi.copy(pub, publicKey)\n    --存放解密结果\n    local decrypt = ffi.new(\"char[?]\", 2048)\n    local ret = rsa.public_decrypt(c_str, #msg, pub, decrypt)\n    if ret == -1 then\n        return nil\n    end\n    return ffi.string(decrypt,ret)\nend\n \nreturn _M\n```\n就这样，本人的openresty rsa加解密第三方库就制作完成了，支持公钥加密私钥解密，也支持私钥加密公钥解密。下面贴出本人的测试代码：\n``` lua\nlocal rsa = require \"resty.rsa\"\nlocal RSA_PUBLIC_KEY = [[-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3bTBJNQJjY6u7Y5b2eOWws0yW\nCGuWPm6MGOSVan65wCrJa5p3q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6\nieLkgbbeqTCzeJ0AryUXiF3auxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMN\nqWgmxiPVwupwAML7RQIDAQAB\n-----END PUBLIC KEY-----]]\nlocal RSA_PRIV_KEY = [[-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC3bTBJNQJjY6u7Y5b2eOWws0yWCGuWPm6MGOSVan65wCrJa5p3\nq3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6ieLkgbbeqTCzeJ0AryUXiF3a\nuxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMNqWgmxiPVwupwAML7RQIDAQAB\nAoGAc4NXvUKc1mqWY9Q75cwNGlJQEMwMtPlsNN4YVeBTHjdeuqoBBQwA62GGXqrN\nQpOBKl79ASGghob8n0j6aAY70PQqHSU4c06c7UlkeEvxJKlyUTO2UgnjjIHb2flR\nuW8y3xmjpXAfwe50eAVMNhCon7DBc+XMF/paSVwiG8V+GAECQQDvosVLImUkIXGf\nI2AJ2iSOUF8W1UZ5Ru68E8hJoVkNehk14RUFzTkwhoPHYDseZyEhSunFQbXCotlL\nAr5+O+lBAkEAw/PJXvi3S557ihDjYjKnj/2XtIa1GwBJxOliVM4eVjfRX15OXPR2\n6shID4ZNWfkWN3fjVm4CnUS41+bzHNctBQJAGCeiF3a6FzA/0bixH40bjjTPwO9y\nkRrzSYX89F8NKOybyfCMO+95ykhk1B4BF4lxr3drpPSAq8Paf1MhfHvxgQJBAJUB\n0WNy5o+OWItJBGAr/Ne2E6KnvRhnQ7GFd8zdYJxXndNTt2tgSv2Gh6WmjzOYApjz\nheC3jy1gkN89NCn+RrECQBTvoqFHfyAlwOGC9ulcAcQDqj/EgCRVkVe1IsQZenAe\nrKCWlUaeIKeVkRz/wzb1zy9AVsPC7Zbnf4nrOxJ23mI=\n-----END RSA PRIVATE KEY-----]]\n \nngx.say('-----公钥加密私钥解密 start------')\nlocal str='i love lwl'\n \nlocal encryptPubStr = rsa.public_encrypt(str, RSA_PUBLIC_KEY)\nif not encryptPubStr then\nngx.say('pub encrypt failed')\nend\nlocal decryptPriStr=rsa.private_decrypt(encryptPubStr,RSA_PRIV_KEY)\nif not decryptPriStr then\nngx.say('pri decrypt failed')\nend\nngx.say('公钥加密私钥解密成功\\n'..decryptPriStr)\nngx.say('-----公钥加密私钥解密 end------')\n \nngx.say('================================')\n \nngx.say('-----私钥加密公钥解密 start------')\nlocal str='i like lwl'\n \nlocal encryptPriStr = rsa.private_encrypt(str, RSA_PRIV_KEY)\nif not encryptPriStr then\nngx.say('pri encrypt failed')\nend\nlocal decryptPubStr=rsa.public_decrypt(encryptPriStr,RSA_PUBLIC_KEY)\nif not decryptPubStr then\nngx.say('pub decrypt failed')\nend\nngx.say('公钥加密私钥解密成功\\n'..decryptPubStr)\nngx.say('-----私钥加密公钥解密 end------')\n```\n项目已托管到Github，欢迎star或fork，也欢迎提出改进意见。\n传送门：[lua-rsa](https://github.com/LittleLiByte/lua-rsa)\n","slug":"openresty-rsa加解密库","published":1,"updated":"2017-03-03T10:39:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztpt9li00053qvc2gm9ypqm","content":"<p>因为lua相关的RSA加解密库比较少，而C和C++相关的RSA加解密库却比较多，因此萌生了通过LuaJit的FFI  拓展库来调用C或C++实现来封装成Lua 的RSA库。经过谷歌终于找到了一个很符合要求的实现方法：<br><a href=\"http://hayageek.com/rsa-encryption-decryption-openssl-c/\" target=\"_blank\" rel=\"external\">http://hayageek.com/rsa-encryption-decryption-openssl-c/</a></p>\n<p>下面就来说说整个开发详细流程</p>\n<h2 id=\"安装OpenSSL\"><a href=\"#安装OpenSSL\" class=\"headerlink\" title=\"安装OpenSSL\"></a>安装OpenSSL</h2><p>RSA加密和解密的公钥私钥由OpenSSL生成。在Ubuntu下，安装OpenSSL通过以下两条命令可以完成：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openssl</div><div class=\"line\">sudo apt-get install libssl-dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"生成公钥和私钥\"><a href=\"#生成公钥和私钥\" class=\"headerlink\" title=\"生成公钥和私钥\"></a>生成公钥和私钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- 生成 RSA 私钥（传统格式的,PKCS<span class=\"comment\">#1标准）</span></div><div class=\"line\">openssl genrsa -out rsa_private_key.pem 1024</div><div class=\"line\">-- 将传统格式的私钥转换成 PKCS<span class=\"comment\">#8 格式的（JAVA需要使用的私钥需要经过PKCS#8编码,而本次在项目作为接口使用Lua编写，如不需要这一步其实可以略过）</span></div><div class=\"line\">openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</div><div class=\"line\">-- 生成 RSA 公钥</div><div class=\"line\">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>\n<h2 id=\"编译动态链接库\"><a href=\"#编译动态链接库\" class=\"headerlink\" title=\"编译动态链接库\"></a>编译动态链接库</h2><p>参考上面给的链接，要封装的RSA加解密C语言实现版如下：<br>rsa.c文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/pem.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/ssl.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/rsa.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/evp.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/bio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/err.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> padding = RSA_PKCS1_PADDING;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">RSA * <span class=\"title\">createRSA</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key,<span class=\"keyword\">int</span> <span class=\"keyword\">public</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RSA *rsa= <span class=\"literal\">NULL</span>;</div><div class=\"line\">    BIO *keybio ;</div><div class=\"line\">    keybio = BIO_new_mem_buf(key, <span class=\"number\">-1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (keybio==<span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Failed to create key BIO\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">public</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;rsa,<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;rsa,<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(rsa == <span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Failed to create RSA\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> rsa;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">public_encrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *encrypted)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">private_decrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * enc_data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *decrypted)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">private_encrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *encrypted)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">public_decrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * enc_data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *decrypted)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>  result = RSA_public_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printLastError</span><span class=\"params\">(<span class=\"keyword\">char</span> *msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> * err = <span class=\"built_in\">malloc</span>(<span class=\"number\">130</span>);;</div><div class=\"line\">    ERR_load_crypto_strings();</div><div class=\"line\">    ERR_error_string(ERR_get_error(), err);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s ERROR: %s\\n\"</span>,msg, err);</div><div class=\"line\">    <span class=\"built_in\">free</span>(err);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在ubuntu下通过以下命令来生成.so库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># gcc rsa.c -fPIC -shared -o librsa.so</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"使用rsa-so库\"><a href=\"#使用rsa-so库\" class=\"headerlink\" title=\"使用rsa.so库\"></a>使用rsa.so库</h2><p>生成的动态链接库放到<strong>usr/lib</strong>目录下就能使用了，以下使用rsa.so封装了一个lua版的rsa加解密库<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"string\">\"rsa\"</span>, <span class=\"built_in\">package</span>.seeall)</div><div class=\"line\"><span class=\"keyword\">local</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">'ffi'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> rsa = ffi.<span class=\"built_in\">load</span>(<span class=\"string\">'rsa'</span>)</div><div class=\"line\"> </div><div class=\"line\">ffi.cdef <span class=\"string\">[[</span></div><div class=\"line\">int public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class=\"line\">int private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class=\"line\"> </div><div class=\"line\">int private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class=\"line\">int public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class=\"line\">]]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> _M = &#123; <span class=\"built_in\">_VERSION</span> = <span class=\"string\">'1.0'</span> &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--公钥加密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.public_encrypt<span class=\"params\">(msg, publicKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pub = ffi.new(<span class=\"string\">\"char[?]\"</span>, #publicKey)</div><div class=\"line\">    ffi.copy(pub, publicKey)</div><div class=\"line\">    <span class=\"comment\">--存放加密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> encrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.public_encrypt(c_str, #msg, pub, encrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(encrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--私钥解密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.private_decrypt<span class=\"params\">(msg, privateKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pri = ffi.new(<span class=\"string\">\"char[?]\"</span>, #privateKey)</div><div class=\"line\">    ffi.copy(pri, privateKey)</div><div class=\"line\">    <span class=\"comment\">--存放解密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> decrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.private_decrypt(c_str, #msg, pri, decrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(decrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--私钥加密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.private_encrypt<span class=\"params\">(msg, privateKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pri = ffi.new(<span class=\"string\">\"char[?]\"</span>, #privateKey)</div><div class=\"line\">    ffi.copy(pri, privateKey)</div><div class=\"line\">    <span class=\"comment\">--存放加密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> encrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.private_encrypt(c_str, #msg, pri, encrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(encrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--公钥解密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.public_decrypt<span class=\"params\">(msg, publicKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pub = ffi.new(<span class=\"string\">\"char[?]\"</span>, #publicKey)</div><div class=\"line\">    ffi.copy(pub, publicKey)</div><div class=\"line\">    <span class=\"comment\">--存放解密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> decrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.public_decrypt(c_str, #msg, pub, decrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(decrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">return</span> _M</div></pre></td></tr></table></figure></p>\n<p>就这样，本人的openresty rsa加解密第三方库就制作完成了，支持公钥加密私钥解密，也支持私钥加密公钥解密。下面贴出本人的测试代码：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> rsa = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.rsa\"</span></div><div class=\"line\"><span class=\"keyword\">local</span> RSA_PUBLIC_KEY = <span class=\"string\">[[-----BEGIN PUBLIC KEY-----</span></div><div class=\"line\">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3bTBJNQJjY6u7Y5b2eOWws0yW</div><div class=\"line\">CGuWPm6MGOSVan65wCrJa5p3q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6</div><div class=\"line\">ieLkgbbeqTCzeJ0AryUXiF3auxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMN</div><div class=\"line\">qWgmxiPVwupwAML7RQIDAQAB</div><div class=\"line\">-----END PUBLIC KEY-----]]</div><div class=\"line\"><span class=\"keyword\">local</span> RSA_PRIV_KEY = <span class=\"string\">[[-----BEGIN RSA PRIVATE KEY-----</span></div><div class=\"line\">MIICXAIBAAKBgQC3bTBJNQJjY6u7Y5b2eOWws0yWCGuWPm6MGOSVan65wCrJa5p3</div><div class=\"line\">q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6ieLkgbbeqTCzeJ0AryUXiF3a</div><div class=\"line\">uxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMNqWgmxiPVwupwAML7RQIDAQAB</div><div class=\"line\">AoGAc4NXvUKc1mqWY9Q75cwNGlJQEMwMtPlsNN4YVeBTHjdeuqoBBQwA62GGXqrN</div><div class=\"line\">QpOBKl79ASGghob8n0j6aAY70PQqHSU4c06c7UlkeEvxJKlyUTO2UgnjjIHb2flR</div><div class=\"line\">uW8y3xmjpXAfwe50eAVMNhCon7DBc+XMF/paSVwiG8V+GAECQQDvosVLImUkIXGf</div><div class=\"line\">I2AJ2iSOUF8W1UZ5Ru68E8hJoVkNehk14RUFzTkwhoPHYDseZyEhSunFQbXCotlL</div><div class=\"line\">Ar5+O+lBAkEAw/PJXvi3S557ihDjYjKnj/2XtIa1GwBJxOliVM4eVjfRX15OXPR2</div><div class=\"line\">6shID4ZNWfkWN3fjVm4CnUS41+bzHNctBQJAGCeiF3a6FzA/0bixH40bjjTPwO9y</div><div class=\"line\">kRrzSYX89F8NKOybyfCMO+95ykhk1B4BF4lxr3drpPSAq8Paf1MhfHvxgQJBAJUB</div><div class=\"line\">0WNy5o+OWItJBGAr/Ne2E6KnvRhnQ7GFd8zdYJxXndNTt2tgSv2Gh6WmjzOYApjz</div><div class=\"line\">heC3jy1gkN89NCn+RrECQBTvoqFHfyAlwOGC9ulcAcQDqj/EgCRVkVe1IsQZenAe</div><div class=\"line\">rKCWlUaeIKeVkRz/wzb1zy9AVsPC7Zbnf4nrOxJ23mI=</div><div class=\"line\">-----END RSA PRIVATE KEY-----]]</div><div class=\"line\"> </div><div class=\"line\">ngx.say(<span class=\"string\">'-----公钥加密私钥解密 start------'</span>)</div><div class=\"line\"><span class=\"keyword\">local</span> str=<span class=\"string\">'i love lwl'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> encryptPubStr = rsa.public_encrypt(str, RSA_PUBLIC_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> encryptPubStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pub encrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">local</span> decryptPriStr=rsa.private_decrypt(encryptPubStr,RSA_PRIV_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> decryptPriStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pri decrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">ngx.say(<span class=\"string\">'公钥加密私钥解密成功\\n'</span>..decryptPriStr)</div><div class=\"line\">ngx.say(<span class=\"string\">'-----公钥加密私钥解密 end------'</span>)</div><div class=\"line\"> </div><div class=\"line\">ngx.say(<span class=\"string\">'================================'</span>)</div><div class=\"line\"> </div><div class=\"line\">ngx.say(<span class=\"string\">'-----私钥加密公钥解密 start------'</span>)</div><div class=\"line\"><span class=\"keyword\">local</span> str=<span class=\"string\">'i like lwl'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> encryptPriStr = rsa.private_encrypt(str, RSA_PRIV_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> encryptPriStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pri encrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">local</span> decryptPubStr=rsa.public_decrypt(encryptPriStr,RSA_PUBLIC_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> decryptPubStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pub decrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">ngx.say(<span class=\"string\">'公钥加密私钥解密成功\\n'</span>..decryptPubStr)</div><div class=\"line\">ngx.say(<span class=\"string\">'-----私钥加密公钥解密 end------'</span>)</div></pre></td></tr></table></figure></p>\n<p>项目已托管到Github，欢迎star或fork，也欢迎提出改进意见。<br>传送门：<a href=\"https://github.com/LittleLiByte/lua-rsa\" target=\"_blank\" rel=\"external\">lua-rsa</a></p>\n","excerpt":"","more":"<p>因为lua相关的RSA加解密库比较少，而C和C++相关的RSA加解密库却比较多，因此萌生了通过LuaJit的FFI  拓展库来调用C或C++实现来封装成Lua 的RSA库。经过谷歌终于找到了一个很符合要求的实现方法：<br><a href=\"http://hayageek.com/rsa-encryption-decryption-openssl-c/\">http://hayageek.com/rsa-encryption-decryption-openssl-c/</a></p>\n<p>下面就来说说整个开发详细流程</p>\n<h2 id=\"安装OpenSSL\"><a href=\"#安装OpenSSL\" class=\"headerlink\" title=\"安装OpenSSL\"></a>安装OpenSSL</h2><p>RSA加密和解密的公钥私钥由OpenSSL生成。在Ubuntu下，安装OpenSSL通过以下两条命令可以完成：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openssl</div><div class=\"line\">sudo apt-get install libssl-dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"生成公钥和私钥\"><a href=\"#生成公钥和私钥\" class=\"headerlink\" title=\"生成公钥和私钥\"></a>生成公钥和私钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- 生成 RSA 私钥（传统格式的,PKCS<span class=\"comment\">#1标准）</span></div><div class=\"line\">openssl genrsa -out rsa_private_key.pem 1024</div><div class=\"line\">-- 将传统格式的私钥转换成 PKCS<span class=\"comment\">#8 格式的（JAVA需要使用的私钥需要经过PKCS#8编码,而本次在项目作为接口使用Lua编写，如不需要这一步其实可以略过）</span></div><div class=\"line\">openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</div><div class=\"line\">-- 生成 RSA 公钥</div><div class=\"line\">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>\n<h2 id=\"编译动态链接库\"><a href=\"#编译动态链接库\" class=\"headerlink\" title=\"编译动态链接库\"></a>编译动态链接库</h2><p>参考上面给的链接，要封装的RSA加解密C语言实现版如下：<br>rsa.c文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/pem.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/ssl.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/rsa.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/evp.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/bio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;openssl/err.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> padding = RSA_PKCS1_PADDING;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">RSA * <span class=\"title\">createRSA</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key,<span class=\"keyword\">int</span> <span class=\"keyword\">public</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    RSA *rsa= <span class=\"literal\">NULL</span>;</div><div class=\"line\">    BIO *keybio ;</div><div class=\"line\">    keybio = BIO_new_mem_buf(key, <span class=\"number\">-1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (keybio==<span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Failed to create key BIO\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">public</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;rsa,<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;rsa,<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(rsa == <span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Failed to create RSA\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> rsa;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">public_encrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *encrypted)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">private_decrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * enc_data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *decrypted)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">private_encrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *encrypted)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">public_decrypt</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * enc_data,<span class=\"keyword\">int</span> data_len,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *decrypted)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    RSA * rsa = createRSA(key,<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>  result = RSA_public_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printLastError</span><span class=\"params\">(<span class=\"keyword\">char</span> *msg)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> * err = <span class=\"built_in\">malloc</span>(<span class=\"number\">130</span>);;</div><div class=\"line\">    ERR_load_crypto_strings();</div><div class=\"line\">    ERR_error_string(ERR_get_error(), err);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s ERROR: %s\\n\"</span>,msg, err);</div><div class=\"line\">    <span class=\"built_in\">free</span>(err);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在ubuntu下通过以下命令来生成.so库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># gcc rsa.c -fPIC -shared -o librsa.so</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"使用rsa-so库\"><a href=\"#使用rsa-so库\" class=\"headerlink\" title=\"使用rsa.so库\"></a>使用rsa.so库</h2><p>生成的动态链接库放到<strong>usr/lib</strong>目录下就能使用了，以下使用rsa.so封装了一个lua版的rsa加解密库<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"string\">\"rsa\"</span>, <span class=\"built_in\">package</span>.seeall)</div><div class=\"line\"><span class=\"keyword\">local</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">'ffi'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> rsa = ffi.<span class=\"built_in\">load</span>(<span class=\"string\">'rsa'</span>)</div><div class=\"line\"> </div><div class=\"line\">ffi.cdef <span class=\"string\">[[</div><div class=\"line\">int public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class=\"line\">int private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class=\"line\"> </div><div class=\"line\">int private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class=\"line\">int public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class=\"line\">]]</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> _M = &#123; <span class=\"built_in\">_VERSION</span> = <span class=\"string\">'1.0'</span> &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--公钥加密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.public_encrypt<span class=\"params\">(msg, publicKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pub = ffi.new(<span class=\"string\">\"char[?]\"</span>, #publicKey)</div><div class=\"line\">    ffi.copy(pub, publicKey)</div><div class=\"line\">    <span class=\"comment\">--存放加密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> encrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.public_encrypt(c_str, #msg, pub, encrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(encrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--私钥解密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.private_decrypt<span class=\"params\">(msg, privateKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pri = ffi.new(<span class=\"string\">\"char[?]\"</span>, #privateKey)</div><div class=\"line\">    ffi.copy(pri, privateKey)</div><div class=\"line\">    <span class=\"comment\">--存放解密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> decrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.private_decrypt(c_str, #msg, pri, decrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(decrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--私钥加密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.private_encrypt<span class=\"params\">(msg, privateKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pri = ffi.new(<span class=\"string\">\"char[?]\"</span>, #privateKey)</div><div class=\"line\">    ffi.copy(pri, privateKey)</div><div class=\"line\">    <span class=\"comment\">--存放加密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> encrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.private_encrypt(c_str, #msg, pri, encrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(encrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">--公钥解密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.public_decrypt<span class=\"params\">(msg, publicKey)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> c_str = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">1024</span> / <span class=\"number\">8</span>)</div><div class=\"line\">    ffi.copy(c_str, msg)</div><div class=\"line\">    <span class=\"keyword\">local</span> pub = ffi.new(<span class=\"string\">\"char[?]\"</span>, #publicKey)</div><div class=\"line\">    ffi.copy(pub, publicKey)</div><div class=\"line\">    <span class=\"comment\">--存放解密结果</span></div><div class=\"line\">    <span class=\"keyword\">local</span> decrypt = ffi.new(<span class=\"string\">\"char[?]\"</span>, <span class=\"number\">2048</span>)</div><div class=\"line\">    <span class=\"keyword\">local</span> ret = rsa.public_decrypt(c_str, #msg, pub, decrypt)</div><div class=\"line\">    <span class=\"keyword\">if</span> ret == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ffi.<span class=\"built_in\">string</span>(decrypt,ret)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">return</span> _M</div></pre></td></tr></table></figure></p>\n<p>就这样，本人的openresty rsa加解密第三方库就制作完成了，支持公钥加密私钥解密，也支持私钥加密公钥解密。下面贴出本人的测试代码：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> rsa = <span class=\"built_in\">require</span> <span class=\"string\">\"resty.rsa\"</span></div><div class=\"line\"><span class=\"keyword\">local</span> RSA_PUBLIC_KEY = <span class=\"string\">[[-----BEGIN PUBLIC KEY-----</div><div class=\"line\">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3bTBJNQJjY6u7Y5b2eOWws0yW</div><div class=\"line\">CGuWPm6MGOSVan65wCrJa5p3q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6</div><div class=\"line\">ieLkgbbeqTCzeJ0AryUXiF3auxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMN</div><div class=\"line\">qWgmxiPVwupwAML7RQIDAQAB</div><div class=\"line\">-----END PUBLIC KEY-----]]</span></div><div class=\"line\"><span class=\"keyword\">local</span> RSA_PRIV_KEY = <span class=\"string\">[[-----BEGIN RSA PRIVATE KEY-----</div><div class=\"line\">MIICXAIBAAKBgQC3bTBJNQJjY6u7Y5b2eOWws0yWCGuWPm6MGOSVan65wCrJa5p3</div><div class=\"line\">q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6ieLkgbbeqTCzeJ0AryUXiF3a</div><div class=\"line\">uxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMNqWgmxiPVwupwAML7RQIDAQAB</div><div class=\"line\">AoGAc4NXvUKc1mqWY9Q75cwNGlJQEMwMtPlsNN4YVeBTHjdeuqoBBQwA62GGXqrN</div><div class=\"line\">QpOBKl79ASGghob8n0j6aAY70PQqHSU4c06c7UlkeEvxJKlyUTO2UgnjjIHb2flR</div><div class=\"line\">uW8y3xmjpXAfwe50eAVMNhCon7DBc+XMF/paSVwiG8V+GAECQQDvosVLImUkIXGf</div><div class=\"line\">I2AJ2iSOUF8W1UZ5Ru68E8hJoVkNehk14RUFzTkwhoPHYDseZyEhSunFQbXCotlL</div><div class=\"line\">Ar5+O+lBAkEAw/PJXvi3S557ihDjYjKnj/2XtIa1GwBJxOliVM4eVjfRX15OXPR2</div><div class=\"line\">6shID4ZNWfkWN3fjVm4CnUS41+bzHNctBQJAGCeiF3a6FzA/0bixH40bjjTPwO9y</div><div class=\"line\">kRrzSYX89F8NKOybyfCMO+95ykhk1B4BF4lxr3drpPSAq8Paf1MhfHvxgQJBAJUB</div><div class=\"line\">0WNy5o+OWItJBGAr/Ne2E6KnvRhnQ7GFd8zdYJxXndNTt2tgSv2Gh6WmjzOYApjz</div><div class=\"line\">heC3jy1gkN89NCn+RrECQBTvoqFHfyAlwOGC9ulcAcQDqj/EgCRVkVe1IsQZenAe</div><div class=\"line\">rKCWlUaeIKeVkRz/wzb1zy9AVsPC7Zbnf4nrOxJ23mI=</div><div class=\"line\">-----END RSA PRIVATE KEY-----]]</span></div><div class=\"line\"> </div><div class=\"line\">ngx.say(<span class=\"string\">'-----公钥加密私钥解密 start------'</span>)</div><div class=\"line\"><span class=\"keyword\">local</span> str=<span class=\"string\">'i love lwl'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> encryptPubStr = rsa.public_encrypt(str, RSA_PUBLIC_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> encryptPubStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pub encrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">local</span> decryptPriStr=rsa.private_decrypt(encryptPubStr,RSA_PRIV_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> decryptPriStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pri decrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">ngx.say(<span class=\"string\">'公钥加密私钥解密成功\\n'</span>..decryptPriStr)</div><div class=\"line\">ngx.say(<span class=\"string\">'-----公钥加密私钥解密 end------'</span>)</div><div class=\"line\"> </div><div class=\"line\">ngx.say(<span class=\"string\">'================================'</span>)</div><div class=\"line\"> </div><div class=\"line\">ngx.say(<span class=\"string\">'-----私钥加密公钥解密 start------'</span>)</div><div class=\"line\"><span class=\"keyword\">local</span> str=<span class=\"string\">'i like lwl'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">local</span> encryptPriStr = rsa.private_encrypt(str, RSA_PRIV_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> encryptPriStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pri encrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">local</span> decryptPubStr=rsa.public_decrypt(encryptPriStr,RSA_PUBLIC_KEY)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> decryptPubStr <span class=\"keyword\">then</span></div><div class=\"line\">ngx.say(<span class=\"string\">'pub decrypt failed'</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">ngx.say(<span class=\"string\">'公钥加密私钥解密成功\\n'</span>..decryptPubStr)</div><div class=\"line\">ngx.say(<span class=\"string\">'-----私钥加密公钥解密 end------'</span>)</div></pre></td></tr></table></figure></p>\n<p>项目已托管到Github，欢迎star或fork，也欢迎提出改进意见。<br>传送门：<a href=\"https://github.com/LittleLiByte/lua-rsa\">lua-rsa</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciztpt9l800013qvcy1hry49o","category_id":"ciztpt9lf00033qvcpriunc0b","_id":"ciztpt9lm00083qvccrr03v57"},{"post_id":"ciztpt9ld00023qvcpnttkte8","category_id":"ciztpt9ll00063qvc8wowjndf","_id":"ciztpt9ln000c3qvco8ingkvj"},{"post_id":"ciztpt9li00053qvc2gm9ypqm","category_id":"ciztpt9lm00093qvctack41oz","_id":"ciztpt9lo000f3qvc9kzba0ev"}],"PostTag":[{"post_id":"ciztpt9l800013qvcy1hry49o","tag_id":"ciztpt9lh00043qvcapyim76c","_id":"ciztpt9ln000b3qvcvrp090xu"},{"post_id":"ciztpt9l800013qvcy1hry49o","tag_id":"ciztpt9ll00073qvcys7irnox","_id":"ciztpt9ln000d3qvcqgzcyqtd"},{"post_id":"ciztpt9ld00023qvcpnttkte8","tag_id":"ciztpt9lm000a3qvc043apdg5","_id":"ciztpt9lp000h3qvcba9z8hgi"},{"post_id":"ciztpt9ld00023qvcpnttkte8","tag_id":"ciztpt9lo000e3qvck8r8kayz","_id":"ciztpt9lr000i3qvcizlt9uki"},{"post_id":"ciztpt9li00053qvc2gm9ypqm","tag_id":"ciztpt9lo000g3qvc27zqx53r","_id":"ciztpt9lt000l3qvcwmjncucm"},{"post_id":"ciztpt9li00053qvc2gm9ypqm","tag_id":"ciztpt9lr000j3qvcp6aa38db","_id":"ciztpt9lt000m3qvcgkzvarge"},{"post_id":"ciztpt9li00053qvc2gm9ypqm","tag_id":"ciztpt9lr000k3qvcz39ifkpx","_id":"ciztpt9lt000n3qvc75kpgu6a"}],"Tag":[{"name":"Hexo","_id":"ciztpt9lh00043qvcapyim76c"},{"name":"YeLee","_id":"ciztpt9ll00073qvcys7irnox"},{"name":"Tinker","_id":"ciztpt9lm000a3qvc043apdg5"},{"name":"热修复","_id":"ciztpt9lo000e3qvck8r8kayz"},{"name":"RSA","_id":"ciztpt9lo000g3qvc27zqx53r"},{"name":"Nginx","_id":"ciztpt9lr000j3qvcp6aa38db"},{"name":"Lua","_id":"ciztpt9lr000k3qvcz39ifkpx"}]}}